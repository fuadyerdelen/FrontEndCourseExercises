(()=>{"use strict";var n={627:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(15),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([n.id,":root {\n  --emerald: #2ecc71;\n  --alizarin: #e74c3c;\n  --wet-asphalt: #34495e;\n  --cell-size: 4rem;\n}\n\n.cell {\n  position: relative;\n  width: var(--cell-size);\n  height: var(--cell-size);\n  background-color: #fff;\n}\n\n.cell-missed {\n}\n\n.cell-missed:after,\n.part-hit:after,\n.ship-sunk > *:after {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  content: '\\274c'; /* use the hex value here... */\n  font-size: var(--cell-size);\n  line-height: var(--cell-size);\n  text-align: center;\n}\n\n/* Media queries */\n\n/* 900px */\n@media only screen and (max-width: 56.25em) {\n  html {\n    font-size: 50%;\n  }\n}\n\n/* 700px */\n@media only screen and (max-width: 43.75em) {\n  html {\n    font-size: 40%;\n  }\n}\n\n/* 560px */\n@media only screen and (max-width: 35em) {\n  html {\n    font-size: 30%;\n  }\n}\n\n/* 400px */\n@media only screen and (max-width: 25em) {\n  html {\n    font-size: 25%;\n  }\n}\n","",{version:3,sources:["webpack://src/components/cell/cell.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,sBAAsB;EACtB,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,uBAAuB;EACvB,wBAAwB;EACxB,sBAAsB;AACxB;;AAEA;AACA;;AAEA;;;EAGE,kBAAkB;EAClB,MAAM;EACN,SAAS;EACT,OAAO;EACP,QAAQ;EACR,gBAAgB,EAAE,8BAA8B;EAChD,2BAA2B;EAC3B,6BAA6B;EAC7B,kBAAkB;AACpB;;AAEA,kBAAkB;;AAElB,UAAU;AACV;EACE;IACE,cAAc;EAChB;AACF;;AAEA,UAAU;AACV;EACE;IACE,cAAc;EAChB;AACF;;AAEA,UAAU;AACV;EACE;IACE,cAAc;EAChB;AACF;;AAEA,UAAU;AACV;EACE;IACE,cAAc;EAChB;AACF",sourcesContent:[":root {\n  --emerald: #2ecc71;\n  --alizarin: #e74c3c;\n  --wet-asphalt: #34495e;\n  --cell-size: 4rem;\n}\n\n.cell {\n  position: relative;\n  width: var(--cell-size);\n  height: var(--cell-size);\n  background-color: #fff;\n}\n\n.cell-missed {\n}\n\n.cell-missed:after,\n.part-hit:after,\n.ship-sunk > *:after {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  content: '\\274c'; /* use the hex value here... */\n  font-size: var(--cell-size);\n  line-height: var(--cell-size);\n  text-align: center;\n}\n\n/* Media queries */\n\n/* 900px */\n@media only screen and (max-width: 56.25em) {\n  html {\n    font-size: 50%;\n  }\n}\n\n/* 700px */\n@media only screen and (max-width: 43.75em) {\n  html {\n    font-size: 40%;\n  }\n}\n\n/* 560px */\n@media only screen and (max-width: 35em) {\n  html {\n    font-size: 30%;\n  }\n}\n\n/* 400px */\n@media only screen and (max-width: 25em) {\n  html {\n    font-size: 25%;\n  }\n}\n"],sourceRoot:""}]);const s=i},993:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(15),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([n.id,".gameboard {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(10, max-content);\n\tgrid-template-columns: repeat(10, max-content);\n\tgap: 1px;\n}\n\n.disabled-gameboard {\n\tpointer-events: none;\n\topacity: 0.4;\n}\n","",{version:3,sources:["webpack://src/components/gameboard/gameboard.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,2CAA2C;CAC3C,8CAA8C;CAC9C,QAAQ;AACT;;AAEA;CACC,oBAAoB;CACpB,YAAY;AACb",sourcesContent:[".gameboard {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(10, max-content);\n\tgrid-template-columns: repeat(10, max-content);\n\tgap: 1px;\n}\n\n.disabled-gameboard {\n\tpointer-events: none;\n\topacity: 0.4;\n}\n"],sourceRoot:""}]);const s=i},271:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(15),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([n.id,".ship {\n  position: absolute;\n  z-index: 99;\n  display: grid;\n  gap: 1px;\n}\n\n[data-own-ship='true'] {\n  cursor: pointer;\n}\n\n.ship-horizontal {\n  grid-auto-flow: column;\n}\n\n.ship-sunk > .part {\n  background-color: var(--wet-asphalt);\n}\n\n.part {\n  position: relative;\n  width: var(--cell-size);\n  height: var(--cell-size);\n}\n\n.part-functional {\n  background-color: var(--emerald);\n}\n\n.part-hit {\n  background-color: var(--alizarin);\n}\n","",{version:3,sources:["webpack://src/components/ship/ship.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,QAAQ;AACV;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,kBAAkB;EAClB,uBAAuB;EACvB,wBAAwB;AAC1B;;AAEA;EACE,gCAAgC;AAClC;;AAEA;EACE,iCAAiC;AACnC",sourcesContent:[".ship {\n  position: absolute;\n  z-index: 99;\n  display: grid;\n  gap: 1px;\n}\n\n[data-own-ship='true'] {\n  cursor: pointer;\n}\n\n.ship-horizontal {\n  grid-auto-flow: column;\n}\n\n.ship-sunk > .part {\n  background-color: var(--wet-asphalt);\n}\n\n.part {\n  position: relative;\n  width: var(--cell-size);\n  height: var(--cell-size);\n}\n\n.part-functional {\n  background-color: var(--emerald);\n}\n\n.part-hit {\n  background-color: var(--alizarin);\n}\n"],sourceRoot:""}]);const s=i},426:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(15),a=e.n(r),o=e(645),i=e.n(o)()(a());i.push([n.id,":root {\n\t--sea-blue: #006994;\n}\n\n*,\n*:before,\n*:after {\n\tbox-sizing: inherit;\n\tpadding: 0;\n\tmargin: 0;\n}\n\nbody {\n\tbox-sizing: border-box;\n\tfont-family: Arial, Helvetica, sans-serif;\n\tbackground-color: var(--sea-blue);\n}\n\nhtml {\n\tfont-size: 62.5%;\n}\n\n.pointer-events-none {\n\tpointer-events: none;\n}\n\n.display-none {\n\tdisplay: none;\n}\n\n.app {\n\theight: 100vh;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: space-around;\n\talign-items: center;\n}\n\n.gameboards {\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: space-around;\n}\n","",{version:3,sources:["webpack://src/style.css"],names:[],mappings:"AAAA;CACC,mBAAmB;AACpB;;AAEA;;;CAGC,mBAAmB;CACnB,UAAU;CACV,SAAS;AACV;;AAEA;CACC,sBAAsB;CACtB,yCAAyC;CACzC,iCAAiC;AAClC;;AAEA;CACC,gBAAgB;AACjB;;AAEA;CACC,oBAAoB;AACrB;;AAEA;CACC,aAAa;AACd;;AAEA;CACC,aAAa;CACb,aAAa;CACb,sBAAsB;CACtB,6BAA6B;CAC7B,mBAAmB;AACpB;;AAEA;CACC,WAAW;CACX,aAAa;CACb,6BAA6B;AAC9B",sourcesContent:[":root {\n\t--sea-blue: #006994;\n}\n\n*,\n*:before,\n*:after {\n\tbox-sizing: inherit;\n\tpadding: 0;\n\tmargin: 0;\n}\n\nbody {\n\tbox-sizing: border-box;\n\tfont-family: Arial, Helvetica, sans-serif;\n\tbackground-color: var(--sea-blue);\n}\n\nhtml {\n\tfont-size: 62.5%;\n}\n\n.pointer-events-none {\n\tpointer-events: none;\n}\n\n.display-none {\n\tdisplay: none;\n}\n\n.app {\n\theight: 100vh;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: space-around;\n\talign-items: center;\n}\n\n.gameboards {\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: space-around;\n}\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,r){"string"==typeof n&&(n=[[null,n,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);r&&a[l[0]]||(e&&(l[2]?l[2]="".concat(e," and ").concat(l[2]):l[2]=e),t.push(l))}},t}},15:n=>{function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}n.exports=function(n){var e,r,a=(r=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var e=[],r=!0,a=!1,o=void 0;try{for(var i,s=n[Symbol.iterator]();!(r=(i=s.next()).done)&&(e.push(i.value),!t||e.length!==t);r=!0);}catch(n){a=!0,o=n}finally{try{r||null==s.return||s.return()}finally{if(a)throw o}}return e}}(e,r)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(n,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(l," */"),u=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[o].concat(u).concat([c]).join("\n")}return[o].join("\n")}},379:(n,t,e)=>{var r,a=function(){var n={};return function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[t]=e}return n[t]}}(),o=[];function i(n){for(var t=-1,e=0;e<o.length;e++)if(o[e].identifier===n){t=e;break}return t}function s(n,t){for(var e={},r=[],a=0;a<n.length;a++){var s=n[a],l=t.base?s[0]+t.base:s[0],c=e[l]||0,u="".concat(l," ").concat(c);e[l]=c+1;var d=i(u),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(o[d].references++,o[d].updater(f)):o.push({identifier:u,updater:m(f,t),references:1}),r.push(u)}return r}function l(n){var t=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=e.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){t.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(t);else{var i=a(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var c,u=(c=[],function(n,t){return c[n]=t,c.filter(Boolean).join("\n")});function d(n,t,e,r){var a=e?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=u(t,a);else{var o=document.createTextNode(a),i=n.childNodes;i[t]&&n.removeChild(i[t]),i.length?n.insertBefore(o,i[t]):n.appendChild(o)}}function f(n,t,e){var r=e.css,a=e.media,o=e.sourceMap;if(a?n.setAttribute("media",a):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var A=null,p=0;function m(n,t){var e,r,a;if(t.singleton){var o=p++;e=A||(A=l(t)),r=d.bind(null,e,o,!1),a=d.bind(null,e,o,!0)}else e=l(t),r=f.bind(null,e,t),a=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return r(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;r(n=t)}else a()}}n.exports=function(n,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var e=s(n=n||[],t);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<e.length;r++){var a=i(e[r]);o[a].references--}for(var l=s(n,t),c=0;c<e.length;c++){var u=i(e[c]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}e=l}}}}},t={};function e(r){if(t[r])return t[r].exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n=e(379),t=e.n(n),r=e(426);t()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var a=e(993);t()(a.Z,{insert:"head",singleton:!1}),a.Z.locals;var o=e(627);t()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;var i=e(271);t()(i.Z,{insert:"head",singleton:!1}),i.Z.locals;var s="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),l=new Uint8Array(16);function c(){if(!s)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return s(l)}const u=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,d=function(n){return"string"==typeof n&&u.test(n)};for(var f=[],A=0;A<256;++A)f.push((A+256).toString(16).substr(1));const p=function(n,t,e){var r=(n=n||{}).random||(n.rng||c)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){e=e||0;for(var a=0;a<16;++a)t[e+a]=r[a];return t}return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=(f[n[t+0]]+f[n[t+1]]+f[n[t+2]]+f[n[t+3]]+"-"+f[n[t+4]]+f[n[t+5]]+"-"+f[n[t+6]]+f[n[t+7]]+"-"+f[n[t+8]]+f[n[t+9]]+"-"+f[n[t+10]]+f[n[t+11]]+f[n[t+12]]+f[n[t+13]]+f[n[t+14]]+f[n[t+15]]).toLowerCase();if(!d(e))throw TypeError("Stringified UUID is invalid");return e}(r)},m=function(n){var t=p();return{id:t,length:n,isHorizontal:!0,parts:function(n){for(var e=[],r=0;r<n;r++)e.push({shipId:t,index:r,isHit:!1,hit:function(){this.isHit=!0}});return e}(n),hit:function(n){this.parts[n].hit()},isSunk:function(){return this.parts.every((function(n){return n.isHit}))}}};function h(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}var v,C,b,y;const g=(v=function(n,t){for(var e=[],r=0;r<t;r++){var a=m(n);e.push(a)}return e},{getShips:function(){for(var n=[],t=1;t<5;t++){var e=v(5-t,t);n.push.apply(n,function(n){if(Array.isArray(n))return h(n)}(r=e)||function(n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n))return Array.from(n)}(r)||function(n,t){if(n){if("string"==typeof n)return h(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?h(n,t):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())}var r;return n},isCellVacant:function(n){return null===n},isMissedCell:C=function(n){return"missed"===n},isFunctionalPart:function(n){return y(n)&&!n.isHit},isValidCellToAttack:function(n){return void 0!==n&&!C(n)&&!b(n)},isPartHit:b=function(n){return y(n)&&n.isHit},isShipDestroyed:function(n,t){var e=n.shipId;return t.findShip(e).isSunk()},isPart:y=function(n){return n&&!!n.shipId}}),E=function(n,t,e,r,a,o,i,s,l){var c=document.createElement("div");if(c.classList.add("cell"),c.dataset.row=r,c.dataset.col=a,e&&(c.addEventListener("dragover",(function(n){n.preventDefault()})),c.addEventListener("drop",s)),!g.isCellVacant(n))if(g.isMissedCell(n))c.classList.add("cell-missed");else if(e&&g.isPart(n)&&0===n.index||!e&&g.isPart(n)&&0===n.index&&t.findShip(n.shipId).isSunk()){var u=function(n,t,e,r,a){var o=t.findShip(n.shipId),i=document.createElement("div");return i.classList.add("ship"),e?(i.dataset.ownShip="true",i.dataset.shipId=o.id,i.setAttribute("draggable","true"),i.addEventListener("dragstart",r),i.addEventListener("click",a)):i.classList.add("pointer-events-none"),o.isSunk()&&i.classList.add("ship-sunk"),o.isHorizontal&&i.classList.add("ship-horizontal"),o.parts.forEach((function(n){var t=document.createElement("div");t.classList.add("part","pointer-events-none"),g.isFunctionalPart(n)?t.classList.add("part-functional"):g.isPartHit(n)&&(t.classList.remove("part-functional"),t.classList.add("part-hit")),i.appendChild(t)})),i}(n,t,e,i,l);c.appendChild(u)}else!e&&g.isPart(n)&&n.isHit&&c.classList.add("part-hit");return!e&&o&&(c.onclick=o),c},B=function(n,t,e,r,a,o,i,s){var l=document.createElement("div");return l.classList.add("gameboard"),l.dataset.name=t,e?l.classList.add("disabled-gameboard"):l.classList.remove("disabled-gameboard"),n.getGameboard().forEach((function(t,e){t.forEach((function(t,c){l.appendChild(E(t,n,r,e,c,a,o,i,s))}))})),l},S=function(){var n=document.body,t=(document.getElementById("root"),document.querySelector(".app"),document.querySelector(".gameboards"),document.querySelector(".gameboard1Container")),e=document.querySelector(".gameboard2Container"),r=document.getElementById("start"),a=document.getElementById("randomise"),o=function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;n.renderTo.innerHTML="",n.renderTo.appendChild(B(n.gameboard,n.name,n.isDisabled(),n.isMainPlayer,t,e,r,a))},i=function(t){n.querySelector("[data-name=".concat(t,"]")).classList.remove("disabled-gameboard")},s=function(n,t,e){n?e.forEach((function(n){return t.classList.add(n)})):e.forEach((function(n){return t.classList.remove(n)}))};return{gameboard1Container:t,gameboard2Container:e,renderGameboard:o,enableGameboard:i,disableOwnShipsClick:function(){document.querySelectorAll('[data-own-ship="true"]').forEach((function(n){return n.classList.add("pointer-events-none")}))},removeOptions:function(n,t){r.removeEventListener("click",n),r.remove(),a.removeEventListener("click",t),a.remove()},style:s,init:function(n,t,l,c,u,d){o(n.player1,null,c,u,d),i("gameboard1"),s(!0,e,["display-none"]),r.addEventListener("click",t),a.addEventListener("click",l)}}}();function w(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}const k=function(n){var t=function(n){for(var t=[],e=0;e<n;e++)t.push(new Array(n).fill(null));return t}(n),e=[],r=function(n,e){if(o(n,e)||!g.isCellVacant(t[n][e]))return!1;for(var r=n-1;r<=n+1;r++)for(var a=e-1;a<=e+1;a++)if(!o(r,a)&&!g.isCellVacant(t[r][a]))return!1;return!0},a=function(n,e){for(var r=n-1;r<=n+1;r++)for(var a=e-1;a<=e+1;a++)!o(r,a)&&g.isCellVacant(t[r][a])&&l(r,a)},o=function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return e.some((function(t){return t<0||t>n-1}))},i=function(n){return e.find((function(t){return t.id===n}))},s=function(n,t,e,a){for(var o=0;o<n;o++)if(t){if(!r(e,a+o))return!1}else if(!r(e+o,a))return!1;return!0},l=function(e,r){var o=t[e][r];if(g.isValidCellToAttack(o)){if(g.isCellVacant(o))t[e][r]="missed";else if(g.isFunctionalPart(o)){var s=i(o.shipId);if(s.hit(o.index),s.isSunk()){var l=function(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var e=[],r=!0,a=!1,o=void 0;try{for(var i,s=n[Symbol.iterator]();!(r=(i=s.next()).done)&&(e.push(i.value),!t||e.length!==t);r=!0);}catch(n){a=!0,o=n}finally{try{r||null==s.return||s.return()}finally{if(a)throw o}}return e}}(n,t)||function(n,t){if(n){if("string"==typeof n)return w(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?w(n,t):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(function(e){for(var r=0;r<n;r++)for(var a=0;a<n;a++)if(t[r][a]===e.parts[0])return[r,a]}(s),2);!function(n,t,e){if(n.isHorizontal)for(var r=e;r<e+n.length;r++)a(t,r);else for(var o=t;o<t+n.length;o++)a(o,e)}(s,l[0],l[1])}}return!0}return!1};return{size:n,containsInvalidCoordinates:o,findShip:i,getGameboard:function(){return t},getShips:function(){return e},isPlacementValid:s,placeShip:function(n,r,a){return!!s(n.length,n.isHorizontal,r,a)&&(e.push(n),function(n,e,r,a){for(var o=0;o<n.length;o++)e?t[r][a+o]=n[o]:t[r+o][a]=n[o]}(n.parts,n.isHorizontal,r,a),!0)},receiveAttack:l,areAllShipsDestroyed:function(){return e.every((function(n){return n.isSunk()}))},emptyGameboard:function(){for(var n=0;n<t.length;n++)for(var r=0;r<t[n].length;r++)t[n][r]&&(t[n][r]=null);e.length=0},removeShip:function(n){for(var r=n.id,a=0;a<t.length;a++)for(var o=0;o<t[a].length;o++)t[a][o]&&t[a][o].shipId===r&&(t[a][o]=null);e=e.filter((function(t){return t!==n}))}}};function x(n,t){if(n){if("string"==typeof n)return z(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?z(n,t):void 0}}function z(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}const I=function(){var n={firstPartHitCoor:null,ship:null,isHorizontal:!0},t=function(t){for(var r,a,o,i=!1;!i;)r=Math.floor(10*Math.random()),a=Math.floor(10*Math.random()),o=t.getGameboard()[r][a],i=g.isValidCellToAttack(o);var s=e(t,r,a);return s&&(n={firstPartHitCoor:[r,a],ship:t.findShip(o.shipId),isHorizontal:!0}),s},e=function(n,t,e){n.receiveAttack(t,e);var r=n.getGameboard()[t][e];return g.isPartHit(r)};return{randomPlaceShips:function(n){var t,e=function(n,t){var e;if("undefined"==typeof Symbol||null==n[Symbol.iterator]){if(Array.isArray(n)||(e=x(n))){e&&(n=e);var r=0,a=function(){};return{s:a,n:function(){return r>=n.length?{done:!0}:{done:!1,value:n[r++]}},e:function(n){throw n},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){e=n[Symbol.iterator]()},n:function(){var n=e.next();return i=n.done,n},e:function(n){s=!0,o=n},f:function(){try{i||null==e.return||e.return()}finally{if(s)throw o}}}}(g.getShips());try{for(e.s();!(t=e.n()).done;)for(var r=t.value,a=!1;!a;){var o=Math.floor(10*Math.random()),i=Math.floor(10*Math.random());(a=n.placeShip(r,o,i))||(r.isHorizontal=!r.isHorizontal,a=n.placeShip(r,o,i))}}catch(n){e.e(n)}finally{e.f()}},randomAttack:t,computerAttack:function(r){var a=n.ship;return a&&!a.isSunk()?function(t){var r=function(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var e=[],r=!0,a=!1,o=void 0;try{for(var i,s=n[Symbol.iterator]();!(r=(i=s.next()).done)&&(e.push(i.value),!t||e.length!==t);r=!0);}catch(n){a=!0,o=n}finally{try{r||null==s.return||s.return()}finally{if(a)throw o}}return e}}(n,t)||x(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(n.firstPartHitCoor,2),a=r[0],o=r[1];if(n.isHorizontal){for(var i=o+1;i<o+4&&!t.containsInvalidCoordinates(a,i);i++){var s=t.getGameboard()[a][i];if(!g.isPartHit(s)){if(g.isValidCellToAttack(s)){var l=e(t,a,i);return l&&(n.isHorizontal=!0),l}break}}for(var c=o-1;c>o-4&&!t.containsInvalidCoordinates(a,c);c--){var u=t.getGameboard()[a][c];if(!g.isPartHit(u)){if(g.isValidCellToAttack(u)){var d=e(t,a,c);return d&&(n.isHorizontal=!0),d}break}}n.isHorizontal=!1}if(!n.isHorizontal){for(var f=a+1;f<a+4&&!t.containsInvalidCoordinates(f,o);f++){var A=t.getGameboard()[f][o];if(!g.isPartHit(A)){if(g.isValidCellToAttack(A)){var p=e(t,f,o);return p&&(n.isHorizontal=!1),p}break}}for(var m=a-1;m>a-4&&!t.containsInvalidCoordinates(m,o);m--){var h=t.getGameboard()[m][o];if(!g.isPartHit(h)){if(g.isValidCellToAttack(h)){var v=e(t,m,o);return v&&(n.isHorizontal=!1),v}break}}}}(r):t(r)},attack:e}};var H,j,L,M,T,P,V,O,G,U,R,D,Z,q,N,F;(j=k(10),L=k(10),M=I(),T=I(),P=M,V=L,O={player1:{gameboard:j,renderTo:S.gameboard1Container,name:"gameboard1",isDisabled:function(){return V===L},isMainPlayer:!0},player2:{gameboard:L,renderTo:S.gameboard2Container,name:"gameboard2",isDisabled:function(){return V===j},isMainPlayer:!1}},G=function(){S.renderGameboard(O.player1,null,q,N,F),S.renderGameboard(O.player2,Z)},U=function n(t,e){if(H=function(n,t){return n.areAllShipsDestroyed()?T:t.areAllShipsDestroyed()?M:null}(j,L))return G(),void alert("Winner is ".concat(H===M?"player1":"player2"));if(!t&&e&&(P=P===M?T:M,V=V===j?L:j),G(),P===T){var r=T.computerAttack(j);setTimeout((function(){n(!1,!r)}),500)}},R=function n(){S.style(!1,S.gameboard2Container,["display-none"]),U(!0,!0),S.disableOwnShipsClick(),S.removeOptions(n,D)},D=function(){j.emptyGameboard(),M.randomPlaceShips(j),S.renderGameboard(O.player1,null,q,N,F),S.enableGameboard("gameboard1")},Z=function(n){if(!H){var t=n.target,e=parseInt(t.dataset.row,10),r=parseInt(t.dataset.col,10),a=V.getGameboard()[e][r];if(g.isValidCellToAttack(a)){var o=P.attack(V,e,r);U(!1,!o)}}},q=function(n){n.dataTransfer.setData("text/plain",n.target.dataset.shipId)},N=function n(t){t.preventDefault();var e=t.target;if(e.classList.contains("cell")){var r=t.dataTransfer.getData("text/plain"),a=j.findShip(r),o=document.querySelector('[data-ship-id="'.concat(r,'"]')).parentNode,i=parseInt(e.dataset.row,10),s=parseInt(e.dataset.col,10),l=parseInt(o.dataset.row,10),c=parseInt(o.dataset.col,10);j.removeShip(a),j.isPlacementValid(a.length,a.isHorizontal,i,s)?j.placeShip(a,i,s):j.placeShip(a,l,c),S.renderGameboard(O.player1,null,q,n,F),S.enableGameboard("gameboard1")}},F=function n(t){var e=t.target.dataset.shipId,r=j.findShip(e),a=document.querySelector('[data-ship-id="'.concat(e,'"]')).parentNode,o=parseInt(a.dataset.row,10),i=parseInt(a.dataset.col,10);j.removeShip(r),r.isHorizontal=!r.isHorizontal,j.placeShip(r,o,i)||(r.isHorizontal=!r.isHorizontal,j.placeShip(r,o,i)),S.renderGameboard(O.player1,null,q,N,n),S.enableGameboard("gameboard1")},{init:function(){!function(n,t){M.randomPlaceShips(n),T.randomPlaceShips(t)}(j,L),S.init(O,R,D,q,N,F)}}).init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9CYXR0bGVzaGlwLy4vc3JjL2NvbXBvbmVudHMvY2VsbC9jZWxsLmNzcyIsIndlYnBhY2s6Ly9CYXR0bGVzaGlwLy4vc3JjL2NvbXBvbmVudHMvZ2FtZWJvYXJkL2dhbWVib2FyZC5jc3MiLCJ3ZWJwYWNrOi8vQmF0dGxlc2hpcC8uL3NyYy9jb21wb25lbnRzL3NoaXAvc2hpcC5jc3MiLCJ3ZWJwYWNrOi8vQmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vQmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vQmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovL0JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vQmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9CYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL0JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9CYXR0bGVzaGlwLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL0JhdHRsZXNoaXAvLi9zcmMvY29tcG9uZW50cy9nYW1lYm9hcmQvZ2FtZWJvYXJkLmNzcz81Y2NkIiwid2VicGFjazovL0JhdHRsZXNoaXAvLi9zcmMvY29tcG9uZW50cy9jZWxsL2NlbGwuY3NzPzNiODQiLCJ3ZWJwYWNrOi8vQmF0dGxlc2hpcC8uL3NyYy9jb21wb25lbnRzL3NoaXAvc2hpcC5jc3M/ZDI3NCIsIndlYnBhY2s6Ly9CYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9ybmcuanMiLCJ3ZWJwYWNrOi8vQmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanMiLCJ3ZWJwYWNrOi8vQmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vQmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovL0JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzIiwid2VicGFjazovL0JhdHRsZXNoaXAvLi9zcmMvZmFjdG9yaWVzL3NoaXAvc2hpcC5qcyIsIndlYnBhY2s6Ly9CYXR0bGVzaGlwLy4vc3JjL2ZhY3Rvcmllcy9wYXJ0L3BhcnQuanMiLCJ3ZWJwYWNrOi8vQmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL2hlbHBlcnMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly9CYXR0bGVzaGlwLy4vc3JjL2NvbXBvbmVudHMvY2VsbC9jZWxsLmpzIiwid2VicGFjazovL0JhdHRsZXNoaXAvLi9zcmMvY29tcG9uZW50cy9zaGlwL3NoaXAuanMiLCJ3ZWJwYWNrOi8vQmF0dGxlc2hpcC8uL3NyYy9jb21wb25lbnRzL2dhbWVib2FyZC9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vQmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL2RvbS9kb20uanMiLCJ3ZWJwYWNrOi8vQmF0dGxlc2hpcC8uL3NyYy9mYWN0b3JpZXMvZ2FtZWJvYXJkL2dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly9CYXR0bGVzaGlwLy4vc3JjL2ZhY3Rvcmllcy9wbGF5ZXIvcGxheWVyLmpzIiwid2VicGFjazovL0JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9nYW1lL2dhbWUuanMiLCJ3ZWJwYWNrOi8vQmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJPYmplY3QiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwibWVtbyIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwiYmluZCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJhbGwiLCJhdG9iIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsInNwbGljZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsImhhc093blByb3BlcnR5IiwiZ2V0UmFuZG9tVmFsdWVzIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJybmRzOCIsIlVpbnQ4QXJyYXkiLCJybmciLCJ1dWlkIiwiYnl0ZVRvSGV4Iiwic3Vic3RyIiwiYnVmIiwib2Zmc2V0Iiwicm5kcyIsInJhbmRvbSIsImFyZ3VtZW50cyIsInRvTG93ZXJDYXNlIiwidXVpZHY0IiwiaXNIb3Jpem9udGFsIiwicGFydHMiLCJzaGlwSWQiLCJpc0hpdCIsImhpdCIsIl9nZXRQYXJ0cyIsImlzU3VuayIsImV2ZXJ5IiwicGFydCIsIl9zaGlwQ3JlYXRvciIsImlzTWlzc2VkQ2VsbCIsImlzUGFydEhpdCIsImlzUGFydCIsInF1YW50aXR5Iiwic2hpcHMiLCJzaGlwT2JqIiwic2hpcCIsImdldFNoaXBzIiwiY3JlYXRlZFNoaXBzIiwiaXNDZWxsVmFjYW50IiwiY2VsbCIsImlzRnVuY3Rpb25hbFBhcnQiLCJpc1ZhbGlkQ2VsbFRvQXR0YWNrIiwiaXNTaGlwRGVzdHJveWVkIiwiZ2FtZWJvYXJkIiwiZmluZFNoaXAiLCJnYW1lYm9hcmRPYmoiLCJpc01haW5QbGF5ZXIiLCJyb3ciLCJjb2wiLCJoYW5kbGVDZWxsQXR0YWNrIiwiaGFuZGxlU2hpcERyYWdTdGFydCIsImhhbmRsZUNlbGxEcm9wIiwiaGFuZGxlU2hpcENsaWNrIiwiY2VsbERpdiIsImNsYXNzTGlzdCIsImFkZCIsImRhdGFzZXQiLCJhZGRFdmVudExpc3RlbmVyIiwicHJldmVudERlZmF1bHQiLCJoZWxwZXJzIiwic2hpcERpdiIsIm93blNoaXAiLCJwYXJ0RGl2Iiwib25jbGljayIsImlzRGlzYWJsZWQiLCJnYW1lYm9hcmREaXYiLCJnZXRHYW1lYm9hcmQiLCJyb3dJbmRleCIsImNvbEluZGV4IiwiYm9keSIsImdhbWVib2FyZDFDb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsImdhbWVib2FyZDJDb250YWluZXIiLCJzdGFydCIsInJhbmRvbWlzZSIsInJlbmRlckdhbWVib2FyZCIsInBsYXllckluZm8iLCJyZW5kZXJUbyIsImlubmVySFRNTCIsImVuYWJsZUdhbWVib2FyZCIsImdhbWVib2FyZE5hbWUiLCJlbCIsInN0eWxlcyIsImRpc2FibGVPd25TaGlwc0NsaWNrIiwicXVlcnlTZWxlY3RvckFsbCIsInJlbW92ZU9wdGlvbnMiLCJoYW5kbGVTdGFydENsaWNrIiwiaGFuZGxlUmFuZG9taXNlQ2xpY2siLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaW5pdCIsInBsYXllcnNJbmZvIiwicGxheWVyMSIsInNpemUiLCJtYXRyaXgiLCJmaWxsIiwiX21hdHJpeCIsIl9pc0NlbGxWYWxpZCIsImNvbnRhaW5zSW52YWxpZENvb3JkaW5hdGVzIiwiaiIsIl9hdHRhY2tDZWxsc1RoYXRTdXJyb3VuZHNBQ2VsbCIsInJlY2VpdmVBdHRhY2siLCJjb29ycyIsInNvbWUiLCJjb29yIiwiZmluZCIsImlzUGxhY2VtZW50VmFsaWQiLCJzaGlwTGVuZ3RoIiwiX2ZpbmRTaGlwQ29vcmRpbmF0ZXMiLCJzaGlwUm93Iiwic2hpcENvbCIsInBhcnRDb2wiLCJwYXJ0Um93IiwiX2F0dGFja0NlbGxzVGhhdFN1cnJvdW5kc0FTaGlwIiwicGxhY2VTaGlwIiwiX3BsYWNlUGFydHMiLCJhcmVBbGxTaGlwc0Rlc3Ryb3llZCIsImVtcHR5R2FtZWJvYXJkIiwicmVtb3ZlU2hpcCIsImNvbXB1dGVyQXR0YWNrRGF0YSIsImZpcnN0UGFydEhpdENvb3IiLCJyYW5kb21BdHRhY2siLCJlbmVteUdhbWVib2FyZCIsImlzQXR0YWNrVmFsaWQiLCJNYXRoIiwiZmxvb3IiLCJhdHRhY2siLCJyYW5kb21QbGFjZVNoaXBzIiwib3duR2FtZWJvYXJkIiwiaXNTaGlwUGxhY2VkIiwiY29tcHV0ZXJBdHRhY2siLCJjdXJyQ29sIiwiY3VyckNlbGwiLCJpdEhpdCIsImN1cnJSb3ciLCJfY29tcHV0ZXJBdHRhY2tDcm9zc0RpcmVjdGlvbiIsIndpbm5lciIsImdhbWVib2FyZDEiLCJnYW1lYm9hcmQyIiwicGxheWVyMiIsImFjdGl2ZVBsYXllciIsImFjdGl2ZUdhbWVib2FyZCIsIl91cGRhdGVHYW1lYm9hcmQiLCJfbmV3Um91bmQiLCJfaGFuZGxlU3RhcnRDbGljayIsIl9oYW5kbGVSYW5kb21pc2VDbGljayIsIl9oYW5kbGVDZWxsQXR0YWNrIiwiX2hhbmRsZVNoaXBEcmFnU3RhcnQiLCJfaGFuZGxlQ2VsbERyb3AiLCJfaGFuZGxlU2hpcENsaWNrIiwicGxheWVyIiwiZG9tIiwiaXNGaXJzdFJvdW5kIiwiaXNOZXdQbGF5ZXIiLCJfZ2V0V2lubmVyIiwiYWxlcnQiLCJzZXRUaW1lb3V0IiwicGFyc2VJbnQiLCJkYXRhVHJhbnNmZXIiLCJzZXREYXRhIiwiY29udGFpbnMiLCJnZXREYXRhIiwic2hpcERpdkNlbGwiLCJyb3dPbGQiLCJjb2xPbGQiLCJfcmFuZG9tUGxhY2VTaGlwcyIsImdhbWUiXSwibWFwcGluZ3MiOiJ1RkFHSUEsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSw4N0JBQSs3QixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQywwQ0FBMEMsTUFBUSxHQUFHLFNBQVcsa2NBQWtjLGVBQWlCLENBQUMsKzdCQUErN0IsV0FBYSxNQUVuK0UsVyw2RENKSUgsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSw0TkFBNk4sR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsb0RBQW9ELE1BQVEsR0FBRyxTQUFXLDRGQUE0RixlQUFpQixDQUFDLDZOQUE2TixXQUFhLE1BRW5zQixXLDZEQ0pJSCxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLG9kQUFxZCxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQywwQ0FBMEMsTUFBUSxHQUFHLFNBQVcsK05BQStOLGVBQWlCLENBQUMscWRBQXFkLFdBQWEsTUFFNXlDLFcsNkRDSklILEUsTUFB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LEVBQVl6RyxRQUFRUixJQUFLLElBRWpEd0YsRUFBV25CLFdBQVduRixHQUlyQnNHLEVBQVcvQixpQkFDVnZFLEVBQVF4SyxPQUNSd0ssRUFBUWYsYUFDUjRCLEVBQ0FDLEdBR0R3RixFQUFXdkIsVUFBVS9FLEVBQVNhLEVBQUtDLEdBRW5Dd0YsRUFBV3ZCLFVBQVUvRSxFQUFTZ0ksRUFBUUMsR0FFdkNiLGtCQUNDNUQsRUFBWUMsUUFDWixLQUNBdUQsRUFDQUMsRUFDQUMsR0FFREUsa0JBQW9CLGdCQUdmRixFQUFtQixTQUFuQkEsRUFBb0I5TixHQUN6QixJQUNNK0YsRUFEUy9GLEVBQUVSLE9BQ0swSSxRQUFRbkMsT0FDeEJhLEVBQVVzRyxFQUFXNUYsU0FBU3ZCLEdBRTlCNEksRUFEVWpQLFNBQVNDLGNBQVQseUJBQXlDb0csRUFBekMsT0FDWTFDLFdBQ3RCb0UsRUFBTTZHLFNBQVNLLEVBQVl6RyxRQUFRVCxJQUFLLElBQ3hDQyxFQUFNNEcsU0FBU0ssRUFBWXpHLFFBQVFSLElBQUssSUFFOUN3RixFQUFXbkIsV0FBV25GLEdBQ3RCQSxFQUFRZixjQUFnQmUsRUFBUWYsYUFDM0JxSCxFQUFXdkIsVUFBVS9FLEVBQVNhLEVBQUtDLEtBQ3ZDZCxFQUFRZixjQUFnQmUsRUFBUWYsYUFDaENxSCxFQUFXdkIsVUFBVS9FLEVBQVNhLEVBQUtDLElBRXBDc0csa0JBQ0M1RCxFQUFZQyxRQUNaLEtBQ0F1RCxFQUNBQyxFQUNBQyxHQUVERSxrQkFBb0IsZUFlZCxDQUFFN0QsS0FaSSxZQTNKYSxTQUFDK0MsRUFBWUMsR0FDdEM5QyxFQUFRbUMsaUJBQWlCVSxHQUN6QkUsRUFBUVosaUJBQWlCVyxHQTBKekIyQixDQUFrQjVCLEVBQVlDLEdBQzlCYSxPQUNDNUQsRUFDQXFELEVBQ0FDLEVBQ0FFLEVBQ0FDLEVBQ0FDLE1Dbk1IaUIsUSIsImZpbGUiOiJhcHAuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCI6cm9vdCB7XFxuICAtLWVtZXJhbGQ6ICMyZWNjNzE7XFxuICAtLWFsaXphcmluOiAjZTc0YzNjO1xcbiAgLS13ZXQtYXNwaGFsdDogIzM0NDk1ZTtcXG4gIC0tY2VsbC1zaXplOiA0cmVtO1xcbn1cXG5cXG4uY2VsbCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogdmFyKC0tY2VsbC1zaXplKTtcXG4gIGhlaWdodDogdmFyKC0tY2VsbC1zaXplKTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxufVxcblxcbi5jZWxsLW1pc3NlZCB7XFxufVxcblxcbi5jZWxsLW1pc3NlZDphZnRlcixcXG4ucGFydC1oaXQ6YWZ0ZXIsXFxuLnNoaXAtc3VuayA+ICo6YWZ0ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgY29udGVudDogJ1xcXFwyNzRjJzsgLyogdXNlIHRoZSBoZXggdmFsdWUgaGVyZS4uLiAqL1xcbiAgZm9udC1zaXplOiB2YXIoLS1jZWxsLXNpemUpO1xcbiAgbGluZS1oZWlnaHQ6IHZhcigtLWNlbGwtc2l6ZSk7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi8qIE1lZGlhIHF1ZXJpZXMgKi9cXG5cXG4vKiA5MDBweCAqL1xcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTYuMjVlbSkge1xcbiAgaHRtbCB7XFxuICAgIGZvbnQtc2l6ZTogNTAlO1xcbiAgfVxcbn1cXG5cXG4vKiA3MDBweCAqL1xcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDMuNzVlbSkge1xcbiAgaHRtbCB7XFxuICAgIGZvbnQtc2l6ZTogNDAlO1xcbiAgfVxcbn1cXG5cXG4vKiA1NjBweCAqL1xcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzVlbSkge1xcbiAgaHRtbCB7XFxuICAgIGZvbnQtc2l6ZTogMzAlO1xcbiAgfVxcbn1cXG5cXG4vKiA0MDBweCAqL1xcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMjVlbSkge1xcbiAgaHRtbCB7XFxuICAgIGZvbnQtc2l6ZTogMjUlO1xcbiAgfVxcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vc3JjL2NvbXBvbmVudHMvY2VsbC9jZWxsLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkIsc0JBQXNCO0VBQ3RCLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQix1QkFBdUI7RUFDdkIsd0JBQXdCO0VBQ3hCLHNCQUFzQjtBQUN4Qjs7QUFFQTtBQUNBOztBQUVBOzs7RUFHRSxrQkFBa0I7RUFDbEIsTUFBTTtFQUNOLFNBQVM7RUFDVCxPQUFPO0VBQ1AsUUFBUTtFQUNSLGdCQUFnQixFQUFFLDhCQUE4QjtFQUNoRCwyQkFBMkI7RUFDM0IsNkJBQTZCO0VBQzdCLGtCQUFrQjtBQUNwQjs7QUFFQSxrQkFBa0I7O0FBRWxCLFVBQVU7QUFDVjtFQUNFO0lBQ0UsY0FBYztFQUNoQjtBQUNGOztBQUVBLFVBQVU7QUFDVjtFQUNFO0lBQ0UsY0FBYztFQUNoQjtBQUNGOztBQUVBLFVBQVU7QUFDVjtFQUNFO0lBQ0UsY0FBYztFQUNoQjtBQUNGOztBQUVBLFVBQVU7QUFDVjtFQUNFO0lBQ0UsY0FBYztFQUNoQjtBQUNGXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjpyb290IHtcXG4gIC0tZW1lcmFsZDogIzJlY2M3MTtcXG4gIC0tYWxpemFyaW46ICNlNzRjM2M7XFxuICAtLXdldC1hc3BoYWx0OiAjMzQ0OTVlO1xcbiAgLS1jZWxsLXNpemU6IDRyZW07XFxufVxcblxcbi5jZWxsIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiB2YXIoLS1jZWxsLXNpemUpO1xcbiAgaGVpZ2h0OiB2YXIoLS1jZWxsLXNpemUpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLmNlbGwtbWlzc2VkIHtcXG59XFxuXFxuLmNlbGwtbWlzc2VkOmFmdGVyLFxcbi5wYXJ0LWhpdDphZnRlcixcXG4uc2hpcC1zdW5rID4gKjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBjb250ZW50OiAnXFxcXDI3NGMnOyAvKiB1c2UgdGhlIGhleCB2YWx1ZSBoZXJlLi4uICovXFxuICBmb250LXNpemU6IHZhcigtLWNlbGwtc2l6ZSk7XFxuICBsaW5lLWhlaWdodDogdmFyKC0tY2VsbC1zaXplKTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLyogTWVkaWEgcXVlcmllcyAqL1xcblxcbi8qIDkwMHB4ICovXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1Ni4yNWVtKSB7XFxuICBodG1sIHtcXG4gICAgZm9udC1zaXplOiA1MCU7XFxuICB9XFxufVxcblxcbi8qIDcwMHB4ICovXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0My43NWVtKSB7XFxuICBodG1sIHtcXG4gICAgZm9udC1zaXplOiA0MCU7XFxuICB9XFxufVxcblxcbi8qIDU2MHB4ICovXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzNWVtKSB7XFxuICBodG1sIHtcXG4gICAgZm9udC1zaXplOiAzMCU7XFxuICB9XFxufVxcblxcbi8qIDQwMHB4ICovXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAyNWVtKSB7XFxuICBodG1sIHtcXG4gICAgZm9udC1zaXplOiAyNSU7XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5nYW1lYm9hcmQge1xcblxcdGRpc3BsYXk6IGdyaWQ7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTAsIG1heC1jb250ZW50KTtcXG5cXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMCwgbWF4LWNvbnRlbnQpO1xcblxcdGdhcDogMXB4O1xcbn1cXG5cXG4uZGlzYWJsZWQtZ2FtZWJvYXJkIHtcXG5cXHRwb2ludGVyLWV2ZW50czogbm9uZTtcXG5cXHRvcGFjaXR5OiAwLjQ7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9zcmMvY29tcG9uZW50cy9nYW1lYm9hcmQvZ2FtZWJvYXJkLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtDQUNDLGFBQWE7Q0FDYiwyQ0FBMkM7Q0FDM0MsOENBQThDO0NBQzlDLFFBQVE7QUFDVDs7QUFFQTtDQUNDLG9CQUFvQjtDQUNwQixZQUFZO0FBQ2JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmdhbWVib2FyZCB7XFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMCwgbWF4LWNvbnRlbnQpO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCBtYXgtY29udGVudCk7XFxuXFx0Z2FwOiAxcHg7XFxufVxcblxcbi5kaXNhYmxlZC1nYW1lYm9hcmQge1xcblxcdHBvaW50ZXItZXZlbnRzOiBub25lO1xcblxcdG9wYWNpdHk6IDAuNDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnNoaXAge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogOTk7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ2FwOiAxcHg7XFxufVxcblxcbltkYXRhLW93bi1zaGlwPSd0cnVlJ10ge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uc2hpcC1ob3Jpem9udGFsIHtcXG4gIGdyaWQtYXV0by1mbG93OiBjb2x1bW47XFxufVxcblxcbi5zaGlwLXN1bmsgPiAucGFydCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS13ZXQtYXNwaGFsdCk7XFxufVxcblxcbi5wYXJ0IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiB2YXIoLS1jZWxsLXNpemUpO1xcbiAgaGVpZ2h0OiB2YXIoLS1jZWxsLXNpemUpO1xcbn1cXG5cXG4ucGFydC1mdW5jdGlvbmFsIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWVtZXJhbGQpO1xcbn1cXG5cXG4ucGFydC1oaXQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWxpemFyaW4pO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vc3JjL2NvbXBvbmVudHMvc2hpcC9zaGlwLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsYUFBYTtFQUNiLFFBQVE7QUFDVjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxvQ0FBb0M7QUFDdEM7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsdUJBQXVCO0VBQ3ZCLHdCQUF3QjtBQUMxQjs7QUFFQTtFQUNFLGdDQUFnQztBQUNsQzs7QUFFQTtFQUNFLGlDQUFpQztBQUNuQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuc2hpcCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiA5OTtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBnYXA6IDFweDtcXG59XFxuXFxuW2RhdGEtb3duLXNoaXA9J3RydWUnXSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5zaGlwLWhvcml6b250YWwge1xcbiAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcXG59XFxuXFxuLnNoaXAtc3VuayA+IC5wYXJ0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdldC1hc3BoYWx0KTtcXG59XFxuXFxuLnBhcnQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IHZhcigtLWNlbGwtc2l6ZSk7XFxuICBoZWlnaHQ6IHZhcigtLWNlbGwtc2l6ZSk7XFxufVxcblxcbi5wYXJ0LWZ1bmN0aW9uYWwge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZW1lcmFsZCk7XFxufVxcblxcbi5wYXJ0LWhpdCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hbGl6YXJpbik7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIjpyb290IHtcXG5cXHQtLXNlYS1ibHVlOiAjMDA2OTk0O1xcbn1cXG5cXG4qLFxcbio6YmVmb3JlLFxcbio6YWZ0ZXIge1xcblxcdGJveC1zaXppbmc6IGluaGVyaXQ7XFxuXFx0cGFkZGluZzogMDtcXG5cXHRtYXJnaW46IDA7XFxufVxcblxcbmJvZHkge1xcblxcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuXFx0Zm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2VhLWJsdWUpO1xcbn1cXG5cXG5odG1sIHtcXG5cXHRmb250LXNpemU6IDYyLjUlO1xcbn1cXG5cXG4ucG9pbnRlci1ldmVudHMtbm9uZSB7XFxuXFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcblxcbi5kaXNwbGF5LW5vbmUge1xcblxcdGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5hcHAge1xcblxcdGhlaWdodDogMTAwdmg7XFxuXFx0ZGlzcGxheTogZmxleDtcXG5cXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcdGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcblxcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5nYW1lYm9hcmRzIHtcXG5cXHR3aWR0aDogMTAwJTtcXG5cXHRkaXNwbGF5OiBmbGV4O1xcblxcdGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtDQUNDLG1CQUFtQjtBQUNwQjs7QUFFQTs7O0NBR0MsbUJBQW1CO0NBQ25CLFVBQVU7Q0FDVixTQUFTO0FBQ1Y7O0FBRUE7Q0FDQyxzQkFBc0I7Q0FDdEIseUNBQXlDO0NBQ3pDLGlDQUFpQztBQUNsQzs7QUFFQTtDQUNDLGdCQUFnQjtBQUNqQjs7QUFFQTtDQUNDLG9CQUFvQjtBQUNyQjs7QUFFQTtDQUNDLGFBQWE7QUFDZDs7QUFFQTtDQUNDLGFBQWE7Q0FDYixhQUFhO0NBQ2Isc0JBQXNCO0NBQ3RCLDZCQUE2QjtDQUM3QixtQkFBbUI7QUFDcEI7O0FBRUE7Q0FDQyxXQUFXO0NBQ1gsYUFBYTtDQUNiLDZCQUE2QjtBQUM5QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6cm9vdCB7XFxuXFx0LS1zZWEtYmx1ZTogIzAwNjk5NDtcXG59XFxuXFxuKixcXG4qOmJlZm9yZSxcXG4qOmFmdGVyIHtcXG5cXHRib3gtc2l6aW5nOiBpbmhlcml0O1xcblxcdHBhZGRpbmc6IDA7XFxuXFx0bWFyZ2luOiAwO1xcbn1cXG5cXG5ib2R5IHtcXG5cXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xcblxcdGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcblxcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlYS1ibHVlKTtcXG59XFxuXFxuaHRtbCB7XFxuXFx0Zm9udC1zaXplOiA2Mi41JTtcXG59XFxuXFxuLnBvaW50ZXItZXZlbnRzLW5vbmUge1xcblxcdHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4uZGlzcGxheS1ub25lIHtcXG5cXHRkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uYXBwIHtcXG5cXHRoZWlnaHQ6IDEwMHZoO1xcblxcdGRpc3BsYXk6IGZsZXg7XFxuXFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG5cXHRhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uZ2FtZWJvYXJkcyB7XFxuXFx0d2lkdGg6IDEwMCU7XFxuXFx0ZGlzcGxheTogZmxleDtcXG5cXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gbW9kdWxlWydkZWZhdWx0J10gOlxuXHRcdCgpID0+IG1vZHVsZTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApIiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2dhbWVib2FyZC5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NlbGwuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zaGlwLmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxuLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvIGltcGxlbWVudGF0aW9uLiBBbHNvLFxuLy8gZmluZCB0aGUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIChtc0NyeXB0bykgb24gSUUxMS5cbnZhciBnZXRSYW5kb21WYWx1ZXMgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pIHx8IHR5cGVvZiBtc0NyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PT0gJ2Z1bmN0aW9uJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0byk7XG52YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBybmcoKSB7XG4gIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICB9XG5cbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pOyIsImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuXG52YXIgYnl0ZVRvSGV4ID0gW107XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIpIHtcbiAgdmFyIG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIHZhciB1dWlkID0gKGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpOyAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gIC8vIG9mIHRoZSBmb2xsb3dpbmc6XG4gIC8vIC0gT25lIG9yIG1vcmUgaW5wdXQgYXJyYXkgdmFsdWVzIGRvbid0IG1hcCB0byBhIGhleCBvY3RldCAobGVhZGluZyB0b1xuICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAvLyAtIEludmFsaWQgaW5wdXQgdmFsdWVzIGZvciB0aGUgUkZDIGB2ZXJzaW9uYCBvciBgdmFyaWFudGAgZmllbGRzXG5cbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gdXVpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5OyIsImltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHN0cmluZ2lmeSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7IC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcblxuICBybmRzWzZdID0gcm5kc1s2XSAmIDB4MGYgfCAweDQwO1xuICBybmRzWzhdID0gcm5kc1s4XSAmIDB4M2YgfCAweDgwOyAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcblxuICBpZiAoYnVmKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdpZnkocm5kcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHY0OyIsImltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHBhcnQgZnJvbSAnLi4vcGFydC9wYXJ0JztcblxuY29uc3Qgc2hpcCA9IChsZW5ndGgpID0+IHtcblx0Y29uc3QgaWQgPSB1dWlkdjQoKTtcblxuXHRjb25zdCBfZ2V0UGFydHMgPSAobGVuZ3RoKSA9PiB7XG5cdFx0Y29uc3QgcGFydHMgPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRwYXJ0cy5wdXNoKHBhcnQoaWQsIGkpKTtcblx0XHR9XG5cdFx0cmV0dXJuIHBhcnRzO1xuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0aWQsXG5cdFx0bGVuZ3RoLFxuXHRcdGlzSG9yaXpvbnRhbDogdHJ1ZSxcblx0XHRwYXJ0czogX2dldFBhcnRzKGxlbmd0aCksXG5cdFx0aGl0KGluZGV4KSB7XG5cdFx0XHR0aGlzLnBhcnRzW2luZGV4XS5oaXQoKTtcblx0XHR9LFxuXHRcdGlzU3VuaygpIHtcblx0XHRcdHJldHVybiB0aGlzLnBhcnRzLmV2ZXJ5KChwYXJ0KSA9PiBwYXJ0LmlzSGl0KTtcblx0XHR9LFxuXHR9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc2hpcDtcbiIsImNvbnN0IHBhcnQgPSAoc2hpcElkLCBpbmRleCkgPT4gKHtcblx0c2hpcElkLFxuXHRpbmRleCxcblx0aXNIaXQ6IGZhbHNlLFxuXHRoaXQoKSB7XG5cdFx0dGhpcy5pc0hpdCA9IHRydWU7XG5cdH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcGFydDtcbiIsImltcG9ydCBzaGlwIGZyb20gJy4uLy4uL2ZhY3Rvcmllcy9zaGlwL3NoaXAnO1xuXG5jb25zdCBoZWxwZXJzID0gKCgpID0+IHtcblx0Y29uc3QgX3NoaXBDcmVhdG9yID0gKGxlbmd0aCwgcXVhbnRpdHkpID0+IHtcblx0XHRjb25zdCBzaGlwcyA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcXVhbnRpdHk7IGkrKykge1xuXHRcdFx0Y29uc3Qgc2hpcE9iaiA9IHNoaXAobGVuZ3RoKTtcblx0XHRcdHNoaXBzLnB1c2goc2hpcE9iaik7XG5cdFx0fVxuXHRcdHJldHVybiBzaGlwcztcblx0fTtcblxuXHRjb25zdCBnZXRTaGlwcyA9ICgpID0+IHtcblx0XHRjb25zdCBzaGlwcyA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSAxOyBpIDwgNTsgaSsrKSB7XG5cdFx0XHRjb25zdCBjcmVhdGVkU2hpcHMgPSBfc2hpcENyZWF0b3IoNSAtIGksIGkpO1xuXHRcdFx0c2hpcHMucHVzaCguLi5jcmVhdGVkU2hpcHMpO1xuXHRcdH1cblx0XHRyZXR1cm4gc2hpcHM7XG5cdH07XG5cblx0Y29uc3QgaXNDZWxsVmFjYW50ID0gKGNlbGwpID0+IHtcblx0XHRyZXR1cm4gY2VsbCA9PT0gbnVsbDtcblx0fTtcblxuXHRjb25zdCBpc01pc3NlZENlbGwgPSAoY2VsbCkgPT4ge1xuXHRcdHJldHVybiBjZWxsID09PSAnbWlzc2VkJztcblx0fTtcblxuXHRjb25zdCBpc0Z1bmN0aW9uYWxQYXJ0ID0gKHBhcnQpID0+IHtcblx0XHRyZXR1cm4gaXNQYXJ0KHBhcnQpICYmICFwYXJ0LmlzSGl0O1xuXHR9O1xuXG5cdGNvbnN0IGlzVmFsaWRDZWxsVG9BdHRhY2sgPSAoY2VsbCkgPT4ge1xuXHRcdHJldHVybiBjZWxsID09PSB1bmRlZmluZWQgfHwgaXNNaXNzZWRDZWxsKGNlbGwpIHx8IGlzUGFydEhpdChjZWxsKVxuXHRcdFx0PyBmYWxzZVxuXHRcdFx0OiB0cnVlO1xuXHR9O1xuXG5cdGNvbnN0IGlzUGFydEhpdCA9IChwYXJ0KSA9PiB7XG5cdFx0cmV0dXJuIGlzUGFydChwYXJ0KSAmJiBwYXJ0LmlzSGl0O1xuXHR9O1xuXG5cdGNvbnN0IGlzU2hpcERlc3Ryb3llZCA9IChwYXJ0LCBnYW1lYm9hcmQpID0+IHtcblx0XHRjb25zdCBzaGlwSWQgPSBwYXJ0LnNoaXBJZDtcblx0XHRjb25zdCBzaGlwID0gZ2FtZWJvYXJkLmZpbmRTaGlwKHNoaXBJZCk7XG5cdFx0cmV0dXJuIHNoaXAuaXNTdW5rKCk7XG5cdH07XG5cblx0Y29uc3QgaXNQYXJ0ID0gKGNlbGwpID0+IHtcblx0XHRyZXR1cm4gY2VsbCAmJiAhIWNlbGwuc2hpcElkO1xuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0Z2V0U2hpcHMsXG5cdFx0aXNDZWxsVmFjYW50LFxuXHRcdGlzTWlzc2VkQ2VsbCxcblx0XHRpc0Z1bmN0aW9uYWxQYXJ0LFxuXHRcdGlzVmFsaWRDZWxsVG9BdHRhY2ssXG5cdFx0aXNQYXJ0SGl0LFxuXHRcdGlzU2hpcERlc3Ryb3llZCxcblx0XHRpc1BhcnQsXG5cdH07XG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBoZWxwZXJzO1xuIiwiaW1wb3J0ICcuL2NlbGwuY3NzJztcbmltcG9ydCBzaGlwIGZyb20gJy4uL3NoaXAvc2hpcCc7XG5pbXBvcnQgaGVscGVycyBmcm9tICcuLi8uLi9tb2R1bGVzL2hlbHBlcnMvaGVscGVycyc7XG5cbmNvbnN0IGNlbGwgPSAoXG5cdGNlbGwsXG5cdGdhbWVib2FyZE9iaixcblx0aXNNYWluUGxheWVyLFxuXHRyb3csXG5cdGNvbCxcblx0aGFuZGxlQ2VsbEF0dGFjayxcblx0aGFuZGxlU2hpcERyYWdTdGFydCxcblx0aGFuZGxlQ2VsbERyb3AsXG5cdGhhbmRsZVNoaXBDbGlja1xuKSA9PiB7XG5cdGNvbnN0IGNlbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0Y2VsbERpdi5jbGFzc0xpc3QuYWRkKCdjZWxsJyk7XG5cdGNlbGxEaXYuZGF0YXNldC5yb3cgPSByb3c7XG5cdGNlbGxEaXYuZGF0YXNldC5jb2wgPSBjb2w7XG5cdGlmIChpc01haW5QbGF5ZXIpIHtcblx0XHRjb25zdCBhbGxvd0Ryb3AgPSAoZSkgPT4ge1xuXHRcdFx0Ly8gUHJldmVudCBkZWZhdWx0IHRvIGFsbG93IGRyb3Bcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9O1xuXHRcdGNlbGxEaXYuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBhbGxvd0Ryb3ApO1xuXHRcdGNlbGxEaXYuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIGhhbmRsZUNlbGxEcm9wKTtcblx0fVxuXHRpZiAoIWhlbHBlcnMuaXNDZWxsVmFjYW50KGNlbGwpKSB7XG5cdFx0aWYgKGhlbHBlcnMuaXNNaXNzZWRDZWxsKGNlbGwpKSB7XG5cdFx0XHRjZWxsRGl2LmNsYXNzTGlzdC5hZGQoJ2NlbGwtbWlzc2VkJyk7XG5cdFx0fSBlbHNlIGlmIChcblx0XHRcdChpc01haW5QbGF5ZXIgJiYgaGVscGVycy5pc1BhcnQoY2VsbCkgJiYgY2VsbC5pbmRleCA9PT0gMCkgfHxcblx0XHRcdCghaXNNYWluUGxheWVyICYmXG5cdFx0XHRcdGhlbHBlcnMuaXNQYXJ0KGNlbGwpICYmXG5cdFx0XHRcdGNlbGwuaW5kZXggPT09IDAgJiZcblx0XHRcdFx0Z2FtZWJvYXJkT2JqLmZpbmRTaGlwKGNlbGwuc2hpcElkKS5pc1N1bmsoKSlcblx0XHQpIHtcblx0XHRcdGNvbnN0IHNoaXBEaXYgPSBzaGlwKFxuXHRcdFx0XHRjZWxsLFxuXHRcdFx0XHRnYW1lYm9hcmRPYmosXG5cdFx0XHRcdGlzTWFpblBsYXllcixcblx0XHRcdFx0aGFuZGxlU2hpcERyYWdTdGFydCxcblx0XHRcdFx0aGFuZGxlU2hpcENsaWNrXG5cdFx0XHQpO1xuXHRcdFx0Y2VsbERpdi5hcHBlbmRDaGlsZChzaGlwRGl2KTtcblx0XHR9IGVsc2UgaWYgKCFpc01haW5QbGF5ZXIgJiYgaGVscGVycy5pc1BhcnQoY2VsbCkgJiYgY2VsbC5pc0hpdCkge1xuXHRcdFx0Y2VsbERpdi5jbGFzc0xpc3QuYWRkKCdwYXJ0LWhpdCcpO1xuXHRcdH1cblx0fVxuXHRpZiAoIWlzTWFpblBsYXllciAmJiBoYW5kbGVDZWxsQXR0YWNrKSB7XG5cdFx0Y2VsbERpdi5vbmNsaWNrID0gaGFuZGxlQ2VsbEF0dGFjaztcblx0fVxuXHRyZXR1cm4gY2VsbERpdjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNlbGw7XG4iLCJpbXBvcnQgJy4vc2hpcC5jc3MnO1xuaW1wb3J0IGhlbHBlcnMgZnJvbSAnLi4vLi4vbW9kdWxlcy9oZWxwZXJzL2hlbHBlcnMnO1xuXG5jb25zdCBzaGlwID0gKFxuXHRjZWxsLFxuXHRnYW1lYm9hcmRPYmosXG5cdGlzTWFpblBsYXllcixcblx0aGFuZGxlU2hpcERyYWdTdGFydCxcblx0aGFuZGxlU2hpcENsaWNrXG4pID0+IHtcblx0Y29uc3Qgc2hpcE9iaiA9IGdhbWVib2FyZE9iai5maW5kU2hpcChjZWxsLnNoaXBJZCk7XG5cdGNvbnN0IHNoaXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0c2hpcERpdi5jbGFzc0xpc3QuYWRkKCdzaGlwJyk7XG5cdGlmIChpc01haW5QbGF5ZXIpIHtcblx0XHRzaGlwRGl2LmRhdGFzZXQub3duU2hpcCA9ICd0cnVlJztcblx0XHRzaGlwRGl2LmRhdGFzZXQuc2hpcElkID0gc2hpcE9iai5pZDtcblx0XHRzaGlwRGl2LnNldEF0dHJpYnV0ZSgnZHJhZ2dhYmxlJywgJ3RydWUnKTtcblx0XHRzaGlwRGl2LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIGhhbmRsZVNoaXBEcmFnU3RhcnQpO1xuXHRcdHNoaXBEaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVTaGlwQ2xpY2spO1xuXHR9IGVsc2Uge1xuXHRcdHNoaXBEaXYuY2xhc3NMaXN0LmFkZCgncG9pbnRlci1ldmVudHMtbm9uZScpO1xuXHR9XG5cdGlmIChzaGlwT2JqLmlzU3VuaygpKSB7XG5cdFx0c2hpcERpdi5jbGFzc0xpc3QuYWRkKCdzaGlwLXN1bmsnKTtcblx0fVxuXHRpZiAoc2hpcE9iai5pc0hvcml6b250YWwpIHtcblx0XHRzaGlwRGl2LmNsYXNzTGlzdC5hZGQoJ3NoaXAtaG9yaXpvbnRhbCcpO1xuXHR9XG5cdHNoaXBPYmoucGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xuXHRcdGNvbnN0IHBhcnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRwYXJ0RGl2LmNsYXNzTGlzdC5hZGQoJ3BhcnQnLCAncG9pbnRlci1ldmVudHMtbm9uZScpO1xuXHRcdGlmIChoZWxwZXJzLmlzRnVuY3Rpb25hbFBhcnQocGFydCkpIHtcblx0XHRcdHBhcnREaXYuY2xhc3NMaXN0LmFkZCgncGFydC1mdW5jdGlvbmFsJyk7XG5cdFx0fSBlbHNlIGlmIChoZWxwZXJzLmlzUGFydEhpdChwYXJ0KSkge1xuXHRcdFx0cGFydERpdi5jbGFzc0xpc3QucmVtb3ZlKCdwYXJ0LWZ1bmN0aW9uYWwnKTtcblx0XHRcdHBhcnREaXYuY2xhc3NMaXN0LmFkZCgncGFydC1oaXQnKTtcblx0XHR9XG5cdFx0c2hpcERpdi5hcHBlbmRDaGlsZChwYXJ0RGl2KTtcblx0fSk7XG5cdHJldHVybiBzaGlwRGl2O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc2hpcDtcbiIsImltcG9ydCAnLi9nYW1lYm9hcmQuY3NzJztcbmltcG9ydCBjZWxsIGZyb20gJy4uL2NlbGwvY2VsbCc7XG5cbmNvbnN0IGdhbWVib2FyZCA9IChcblx0Z2FtZWJvYXJkT2JqLFxuXHRuYW1lLFxuXHRpc0Rpc2FibGVkLFxuXHRpc01haW5QbGF5ZXIsXG5cdGhhbmRsZUNlbGxBdHRhY2ssXG5cdGhhbmRsZVNoaXBEcmFnU3RhcnQsXG5cdGhhbmRsZUNlbGxEcm9wLFxuXHRoYW5kbGVTaGlwQ2xpY2tcbikgPT4ge1xuXHRjb25zdCBnYW1lYm9hcmREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0Z2FtZWJvYXJkRGl2LmNsYXNzTGlzdC5hZGQoJ2dhbWVib2FyZCcpO1xuXHRnYW1lYm9hcmREaXYuZGF0YXNldC5uYW1lID0gbmFtZTtcblx0aWYgKGlzRGlzYWJsZWQpIHtcblx0XHRnYW1lYm9hcmREaXYuY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQtZ2FtZWJvYXJkJyk7XG5cdH0gZWxzZSB7XG5cdFx0Z2FtZWJvYXJkRGl2LmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkLWdhbWVib2FyZCcpO1xuXHR9XG5cdGdhbWVib2FyZE9iai5nZXRHYW1lYm9hcmQoKS5mb3JFYWNoKChyb3csIHJvd0luZGV4KSA9PiB7XG5cdFx0cm93LmZvckVhY2goKGNvbCwgY29sSW5kZXgpID0+IHtcblx0XHRcdGdhbWVib2FyZERpdi5hcHBlbmRDaGlsZChcblx0XHRcdFx0Y2VsbChcblx0XHRcdFx0XHRjb2wsXG5cdFx0XHRcdFx0Z2FtZWJvYXJkT2JqLFxuXHRcdFx0XHRcdGlzTWFpblBsYXllcixcblx0XHRcdFx0XHRyb3dJbmRleCxcblx0XHRcdFx0XHRjb2xJbmRleCxcblx0XHRcdFx0XHRoYW5kbGVDZWxsQXR0YWNrLFxuXHRcdFx0XHRcdGhhbmRsZVNoaXBEcmFnU3RhcnQsXG5cdFx0XHRcdFx0aGFuZGxlQ2VsbERyb3AsXG5cdFx0XHRcdFx0aGFuZGxlU2hpcENsaWNrXG5cdFx0XHRcdClcblx0XHRcdCk7XG5cdFx0fSk7XG5cdH0pO1xuXHRyZXR1cm4gZ2FtZWJvYXJkRGl2O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2FtZWJvYXJkO1xuIiwiaW1wb3J0IGdhbWVib2FyZCBmcm9tICcuLi8uLi9jb21wb25lbnRzL2dhbWVib2FyZC9nYW1lYm9hcmQnO1xuaW1wb3J0IGdhbWUgZnJvbSAnLi4vZ2FtZS9nYW1lJztcblxuY29uc3QgZG9tID0gKCgpID0+IHtcblx0Y29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XG5cdGNvbnN0IHJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpO1xuXHRjb25zdCBhcHAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXBwJyk7XG5cdGNvbnN0IGdhbWVib2FyZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FtZWJvYXJkcycpO1xuXHRjb25zdCBnYW1lYm9hcmQxQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdhbWVib2FyZDFDb250YWluZXInKTtcblx0Y29uc3QgZ2FtZWJvYXJkMkNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5nYW1lYm9hcmQyQ29udGFpbmVyJyk7XG5cdGNvbnN0IHN0YXJ0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXJ0Jyk7XG5cdGNvbnN0IHJhbmRvbWlzZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyYW5kb21pc2UnKTtcblxuXHRjb25zdCByZW5kZXJHYW1lYm9hcmQgPSAoXG5cdFx0cGxheWVySW5mbyxcblx0XHRoYW5kbGVDZWxsQXR0YWNrID0gbnVsbCxcblx0XHRoYW5kbGVTaGlwRHJhZ1N0YXJ0ID0gbnVsbCxcblx0XHRoYW5kbGVDZWxsRHJvcCA9IG51bGwsXG5cdFx0aGFuZGxlU2hpcENsaWNrID0gbnVsbFxuXHQpID0+IHtcblx0XHRwbGF5ZXJJbmZvLnJlbmRlclRvLmlubmVySFRNTCA9ICcnO1xuXHRcdHBsYXllckluZm8ucmVuZGVyVG8uYXBwZW5kQ2hpbGQoXG5cdFx0XHRnYW1lYm9hcmQoXG5cdFx0XHRcdHBsYXllckluZm8uZ2FtZWJvYXJkLFxuXHRcdFx0XHRwbGF5ZXJJbmZvLm5hbWUsXG5cdFx0XHRcdHBsYXllckluZm8uaXNEaXNhYmxlZCgpLFxuXHRcdFx0XHRwbGF5ZXJJbmZvLmlzTWFpblBsYXllcixcblx0XHRcdFx0aGFuZGxlQ2VsbEF0dGFjayxcblx0XHRcdFx0aGFuZGxlU2hpcERyYWdTdGFydCxcblx0XHRcdFx0aGFuZGxlQ2VsbERyb3AsXG5cdFx0XHRcdGhhbmRsZVNoaXBDbGlja1xuXHRcdFx0KVxuXHRcdCk7XG5cdH07XG5cblx0Y29uc3QgZW5hYmxlR2FtZWJvYXJkID0gKGdhbWVib2FyZE5hbWUpID0+IHtcblx0XHRjb25zdCBnYW1lYm9hcmREaXYgPSBib2R5LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLW5hbWU9JHtnYW1lYm9hcmROYW1lfV1gKTtcblx0XHRnYW1lYm9hcmREaXYuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQtZ2FtZWJvYXJkJyk7XG5cdH07XG5cblx0Y29uc3QgZGlzYWJsZU93blNoaXBzQ2xpY2sgPSAoKSA9PiB7XG5cdFx0Y29uc3Qgb3duU2hpcHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1vd24tc2hpcD1cInRydWVcIl0nKTtcblx0XHRvd25TaGlwcy5mb3JFYWNoKChvd25TaGlwKSA9PiBvd25TaGlwLmNsYXNzTGlzdC5hZGQoJ3BvaW50ZXItZXZlbnRzLW5vbmUnKSk7XG5cdH07XG5cblx0Y29uc3QgcmVtb3ZlT3B0aW9ucyA9IChoYW5kbGVTdGFydENsaWNrLCBoYW5kbGVSYW5kb21pc2VDbGljaykgPT4ge1xuXHRcdHN0YXJ0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlU3RhcnRDbGljayk7XG5cdFx0c3RhcnQucmVtb3ZlKCk7XG5cdFx0cmFuZG9taXNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlUmFuZG9taXNlQ2xpY2spO1xuXHRcdHJhbmRvbWlzZS5yZW1vdmUoKTtcblx0fTtcblxuXHRjb25zdCBzdHlsZSA9IChhZGQsIGVsLCBzdHlsZXMpID0+IHtcblx0XHRhZGRcblx0XHRcdD8gc3R5bGVzLmZvckVhY2goKHN0eWxlKSA9PiBlbC5jbGFzc0xpc3QuYWRkKHN0eWxlKSlcblx0XHRcdDogc3R5bGVzLmZvckVhY2goKHN0eWxlKSA9PiBlbC5jbGFzc0xpc3QucmVtb3ZlKHN0eWxlKSk7XG5cdH07XG5cblx0Y29uc3QgaW5pdCA9IChcblx0XHRwbGF5ZXJzSW5mbyxcblx0XHRoYW5kbGVTdGFydENsaWNrLFxuXHRcdGhhbmRsZVJhbmRvbWlzZUNsaWNrLFxuXHRcdGhhbmRsZVNoaXBEcmFnU3RhcnQsXG5cdFx0aGFuZGxlQ2VsbERyb3AsXG5cdFx0aGFuZGxlU2hpcENsaWNrXG5cdCkgPT4ge1xuXHRcdHJlbmRlckdhbWVib2FyZChcblx0XHRcdHBsYXllcnNJbmZvLnBsYXllcjEsXG5cdFx0XHRudWxsLFxuXHRcdFx0aGFuZGxlU2hpcERyYWdTdGFydCxcblx0XHRcdGhhbmRsZUNlbGxEcm9wLFxuXHRcdFx0aGFuZGxlU2hpcENsaWNrXG5cdFx0KTtcblx0XHRlbmFibGVHYW1lYm9hcmQoJ2dhbWVib2FyZDEnKTtcblx0XHRzdHlsZSh0cnVlLCBnYW1lYm9hcmQyQ29udGFpbmVyLCBbJ2Rpc3BsYXktbm9uZSddKTtcblx0XHRzdGFydC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZVN0YXJ0Q2xpY2spO1xuXHRcdHJhbmRvbWlzZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZVJhbmRvbWlzZUNsaWNrKTtcblx0fTtcblxuXHRyZXR1cm4ge1xuXHRcdGdhbWVib2FyZDFDb250YWluZXIsXG5cdFx0Z2FtZWJvYXJkMkNvbnRhaW5lcixcblx0XHRyZW5kZXJHYW1lYm9hcmQsXG5cdFx0ZW5hYmxlR2FtZWJvYXJkLFxuXHRcdGRpc2FibGVPd25TaGlwc0NsaWNrLFxuXHRcdHJlbW92ZU9wdGlvbnMsXG5cdFx0c3R5bGUsXG5cdFx0aW5pdCxcblx0fTtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGRvbTtcbiIsImltcG9ydCBoZWxwZXJzIGZyb20gJy4uLy4uL21vZHVsZXMvaGVscGVycy9oZWxwZXJzJztcblxuY29uc3QgZ2FtZWJvYXJkID0gKHNpemUpID0+IHtcblx0Y29uc3QgX21hdHJpeCA9IChzaXplKSA9PiB7XG5cdFx0Y29uc3QgbWF0cml4ID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcblx0XHRcdG1hdHJpeC5wdXNoKG5ldyBBcnJheShzaXplKS5maWxsKG51bGwpKTtcblx0XHR9XG5cdFx0cmV0dXJuIG1hdHJpeDtcblx0fTtcblxuXHRjb25zdCBnYW1lYm9hcmQgPSBfbWF0cml4KHNpemUpO1xuXHRsZXQgc2hpcHMgPSBbXTtcblxuXHRjb25zdCBfaXNDZWxsVmFsaWQgPSAocm93LCBjb2wpID0+IHtcblx0XHRpZiAoXG5cdFx0XHRjb250YWluc0ludmFsaWRDb29yZGluYXRlcyhyb3csIGNvbCkgfHxcblx0XHRcdCFoZWxwZXJzLmlzQ2VsbFZhY2FudChnYW1lYm9hcmRbcm93XVtjb2xdKVxuXHRcdCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRmb3IgKGxldCBpID0gcm93IC0gMTsgaSA8PSByb3cgKyAxOyBpKyspIHtcblx0XHRcdGZvciAobGV0IGogPSBjb2wgLSAxOyBqIDw9IGNvbCArIDE7IGorKykge1xuXHRcdFx0XHRpZiAoY29udGFpbnNJbnZhbGlkQ29vcmRpbmF0ZXMoaSwgaikpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWhlbHBlcnMuaXNDZWxsVmFjYW50KGdhbWVib2FyZFtpXVtqXSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0Y29uc3QgX3BsYWNlUGFydHMgPSAocGFydHMsIGlzSG9yaXpvbnRhbCwgcm93LCBjb2wpID0+IHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRcdGdhbWVib2FyZFtyb3ddW2NvbCArIGldID0gcGFydHNbaV07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRnYW1lYm9hcmRbcm93ICsgaV1bY29sXSA9IHBhcnRzW2ldO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRjb25zdCBfZmluZFNoaXBDb29yZGluYXRlcyA9IChzaGlwKSA9PiB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcblx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG5cdFx0XHRcdGlmIChnYW1lYm9hcmRbaV1bal0gPT09IHNoaXAucGFydHNbMF0pIHtcblx0XHRcdFx0XHRyZXR1cm4gW2ksIGpdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdGNvbnN0IF9hdHRhY2tDZWxsc1RoYXRTdXJyb3VuZHNBQ2VsbCA9IChyb3csIGNvbCkgPT4ge1xuXHRcdGZvciAobGV0IGkgPSByb3cgLSAxOyBpIDw9IHJvdyArIDE7IGkrKykge1xuXHRcdFx0Zm9yIChsZXQgaiA9IGNvbCAtIDE7IGogPD0gY29sICsgMTsgaisrKSB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQhY29udGFpbnNJbnZhbGlkQ29vcmRpbmF0ZXMoaSwgaikgJiZcblx0XHRcdFx0XHRoZWxwZXJzLmlzQ2VsbFZhY2FudChnYW1lYm9hcmRbaV1bal0pXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJlY2VpdmVBdHRhY2soaSwgaik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Y29uc3QgX2F0dGFja0NlbGxzVGhhdFN1cnJvdW5kc0FTaGlwID0gKHNoaXAsIHNoaXBSb3csIHNoaXBDb2wpID0+IHtcblx0XHRpZiAoc2hpcC5pc0hvcml6b250YWwpIHtcblx0XHRcdGZvciAobGV0IHBhcnRDb2wgPSBzaGlwQ29sOyBwYXJ0Q29sIDwgc2hpcENvbCArIHNoaXAubGVuZ3RoOyBwYXJ0Q29sKyspIHtcblx0XHRcdFx0X2F0dGFja0NlbGxzVGhhdFN1cnJvdW5kc0FDZWxsKHNoaXBSb3csIHBhcnRDb2wpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGxldCBwYXJ0Um93ID0gc2hpcFJvdzsgcGFydFJvdyA8IHNoaXBSb3cgKyBzaGlwLmxlbmd0aDsgcGFydFJvdysrKSB7XG5cdFx0XHRcdF9hdHRhY2tDZWxsc1RoYXRTdXJyb3VuZHNBQ2VsbChwYXJ0Um93LCBzaGlwQ29sKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Y29uc3QgY29udGFpbnNJbnZhbGlkQ29vcmRpbmF0ZXMgPSAoLi4uY29vcnMpID0+IHtcblx0XHRyZXR1cm4gY29vcnMuc29tZSgoY29vcikgPT4gY29vciA8IDAgfHwgY29vciA+IHNpemUgLSAxKTtcblx0fTtcblxuXHRjb25zdCBmaW5kU2hpcCA9IChzaGlwSWQpID0+IHtcblx0XHRyZXR1cm4gc2hpcHMuZmluZCgoc2hpcCkgPT4gc2hpcC5pZCA9PT0gc2hpcElkKTtcblx0fTtcblxuXHRjb25zdCBnZXRHYW1lYm9hcmQgPSAoKSA9PiBnYW1lYm9hcmQ7XG5cblx0Y29uc3QgZ2V0U2hpcHMgPSAoKSA9PiBzaGlwcztcblxuXHRjb25zdCBpc1BsYWNlbWVudFZhbGlkID0gKHNoaXBMZW5ndGgsIGlzSG9yaXpvbnRhbCwgcm93LCBjb2wpID0+IHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHRpZiAoIV9pc0NlbGxWYWxpZChyb3csIGNvbCArIGkpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoIV9pc0NlbGxWYWxpZChyb3cgKyBpLCBjb2wpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG5cdGNvbnN0IHBsYWNlU2hpcCA9IChzaGlwLCByb3csIGNvbCkgPT4ge1xuXHRcdGlmIChpc1BsYWNlbWVudFZhbGlkKHNoaXAubGVuZ3RoLCBzaGlwLmlzSG9yaXpvbnRhbCwgcm93LCBjb2wpKSB7XG5cdFx0XHRzaGlwcy5wdXNoKHNoaXApO1xuXHRcdFx0X3BsYWNlUGFydHMoc2hpcC5wYXJ0cywgc2hpcC5pc0hvcml6b250YWwsIHJvdywgY29sKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0Y29uc3QgcmVjZWl2ZUF0dGFjayA9IChyb3csIGNvbCkgPT4ge1xuXHRcdGNvbnN0IGNlbGwgPSBnYW1lYm9hcmRbcm93XVtjb2xdO1xuXHRcdGlmIChoZWxwZXJzLmlzVmFsaWRDZWxsVG9BdHRhY2soY2VsbCkpIHtcblx0XHRcdGlmIChoZWxwZXJzLmlzQ2VsbFZhY2FudChjZWxsKSkge1xuXHRcdFx0XHRnYW1lYm9hcmRbcm93XVtjb2xdID0gJ21pc3NlZCc7XG5cdFx0XHR9IGVsc2UgaWYgKGhlbHBlcnMuaXNGdW5jdGlvbmFsUGFydChjZWxsKSkge1xuXHRcdFx0XHRjb25zdCBzaGlwID0gZmluZFNoaXAoY2VsbC5zaGlwSWQpO1xuXHRcdFx0XHRzaGlwLmhpdChjZWxsLmluZGV4KTtcblx0XHRcdFx0aWYgKHNoaXAuaXNTdW5rKCkpIHtcblx0XHRcdFx0XHRjb25zdCBbc2hpcFJvdywgc2hpcENvbF0gPSBfZmluZFNoaXBDb29yZGluYXRlcyhzaGlwKTtcblx0XHRcdFx0XHRfYXR0YWNrQ2VsbHNUaGF0U3Vycm91bmRzQVNoaXAoc2hpcCwgc2hpcFJvdywgc2hpcENvbCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0Y29uc3QgYXJlQWxsU2hpcHNEZXN0cm95ZWQgPSAoKSA9PiB7XG5cdFx0cmV0dXJuIHNoaXBzLmV2ZXJ5KChzaGlwKSA9PiBzaGlwLmlzU3VuaygpKTtcblx0fTtcblxuXHRjb25zdCBlbXB0eUdhbWVib2FyZCA9ICgpID0+IHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGdhbWVib2FyZC5sZW5ndGg7IGkrKykge1xuXHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBnYW1lYm9hcmRbaV0ubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0aWYgKGdhbWVib2FyZFtpXVtqXSkge1xuXHRcdFx0XHRcdGdhbWVib2FyZFtpXVtqXSA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0c2hpcHMubGVuZ3RoID0gMDtcblx0fTtcblxuXHRjb25zdCByZW1vdmVTaGlwID0gKHNoaXApID0+IHtcblx0XHRjb25zdCBzaGlwSWQgPSBzaGlwLmlkO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZ2FtZWJvYXJkLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGdhbWVib2FyZFtpXS5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRpZiAoZ2FtZWJvYXJkW2ldW2pdICYmIGdhbWVib2FyZFtpXVtqXS5zaGlwSWQgPT09IHNoaXBJZCkge1xuXHRcdFx0XHRcdGdhbWVib2FyZFtpXVtqXSA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0c2hpcHMgPSBzaGlwcy5maWx0ZXIoKGVsKSA9PiBlbCAhPT0gc2hpcCk7XG5cdH07XG5cblx0cmV0dXJuIHtcblx0XHRzaXplLFxuXHRcdGNvbnRhaW5zSW52YWxpZENvb3JkaW5hdGVzLFxuXHRcdGZpbmRTaGlwLFxuXHRcdGdldEdhbWVib2FyZCxcblx0XHRnZXRTaGlwcyxcblx0XHRpc1BsYWNlbWVudFZhbGlkLFxuXHRcdHBsYWNlU2hpcCxcblx0XHRyZWNlaXZlQXR0YWNrLFxuXHRcdGFyZUFsbFNoaXBzRGVzdHJveWVkLFxuXHRcdGVtcHR5R2FtZWJvYXJkLFxuXHRcdHJlbW92ZVNoaXAsXG5cdH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnYW1lYm9hcmQ7XG4iLCJpbXBvcnQgaGVscGVycyBmcm9tICcuLi8uLi9tb2R1bGVzL2hlbHBlcnMvaGVscGVycyc7XG5cbmNvbnN0IHBsYXllciA9ICgpID0+IHtcblx0bGV0IGNvbXB1dGVyQXR0YWNrRGF0YSA9IHtcblx0XHRmaXJzdFBhcnRIaXRDb29yOiBudWxsLFxuXHRcdHNoaXA6IG51bGwsXG5cdFx0aXNIb3Jpem9udGFsOiB0cnVlLFxuXHR9O1xuXG5cdGNvbnN0IF9jb21wdXRlckF0dGFja0Nyb3NzRGlyZWN0aW9uID0gKGVuZW15R2FtZWJvYXJkKSA9PiB7XG5cdFx0Y29uc3QgW3JvdywgY29sXSA9IGNvbXB1dGVyQXR0YWNrRGF0YS5maXJzdFBhcnRIaXRDb29yO1xuXG5cdFx0aWYgKGNvbXB1dGVyQXR0YWNrRGF0YS5pc0hvcml6b250YWwpIHtcblx0XHRcdGZvciAobGV0IGN1cnJDb2wgPSBjb2wgKyAxOyBjdXJyQ29sIDwgY29sICsgNDsgY3VyckNvbCsrKSB7XG5cdFx0XHRcdGlmIChlbmVteUdhbWVib2FyZC5jb250YWluc0ludmFsaWRDb29yZGluYXRlcyhyb3csIGN1cnJDb2wpKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgY3VyckNlbGwgPSBlbmVteUdhbWVib2FyZC5nZXRHYW1lYm9hcmQoKVtyb3ddW2N1cnJDb2xdO1xuXHRcdFx0XHRpZiAoaGVscGVycy5pc1BhcnRIaXQoY3VyckNlbGwpKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIWhlbHBlcnMuaXNWYWxpZENlbGxUb0F0dGFjayhjdXJyQ2VsbCkpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zdCBpdEhpdCA9IGF0dGFjayhlbmVteUdhbWVib2FyZCwgcm93LCBjdXJyQ29sKTtcblx0XHRcdFx0XHRpZiAoaXRIaXQpIHtcblx0XHRcdFx0XHRcdGNvbXB1dGVyQXR0YWNrRGF0YS5pc0hvcml6b250YWwgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gaXRIaXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yIChsZXQgY3VyckNvbCA9IGNvbCAtIDE7IGN1cnJDb2wgPiBjb2wgLSA0OyBjdXJyQ29sLS0pIHtcblx0XHRcdFx0aWYgKGVuZW15R2FtZWJvYXJkLmNvbnRhaW5zSW52YWxpZENvb3JkaW5hdGVzKHJvdywgY3VyckNvbCkpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBjdXJyQ2VsbCA9IGVuZW15R2FtZWJvYXJkLmdldEdhbWVib2FyZCgpW3Jvd11bY3VyckNvbF07XG5cdFx0XHRcdGlmIChoZWxwZXJzLmlzUGFydEhpdChjdXJyQ2VsbCkpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fSBlbHNlIGlmICghaGVscGVycy5pc1ZhbGlkQ2VsbFRvQXR0YWNrKGN1cnJDZWxsKSkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnN0IGl0SGl0ID0gYXR0YWNrKGVuZW15R2FtZWJvYXJkLCByb3csIGN1cnJDb2wpO1xuXHRcdFx0XHRcdGlmIChpdEhpdCkge1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJBdHRhY2tEYXRhLmlzSG9yaXpvbnRhbCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBpdEhpdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Y29tcHV0ZXJBdHRhY2tEYXRhLmlzSG9yaXpvbnRhbCA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmICghY29tcHV0ZXJBdHRhY2tEYXRhLmlzSG9yaXpvbnRhbCkge1xuXHRcdFx0Zm9yIChsZXQgY3VyclJvdyA9IHJvdyArIDE7IGN1cnJSb3cgPCByb3cgKyA0OyBjdXJyUm93KyspIHtcblx0XHRcdFx0aWYgKGVuZW15R2FtZWJvYXJkLmNvbnRhaW5zSW52YWxpZENvb3JkaW5hdGVzKGN1cnJSb3csIGNvbCkpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBjdXJyQ2VsbCA9IGVuZW15R2FtZWJvYXJkLmdldEdhbWVib2FyZCgpW2N1cnJSb3ddW2NvbF07XG5cdFx0XHRcdGlmIChoZWxwZXJzLmlzUGFydEhpdChjdXJyQ2VsbCkpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fSBlbHNlIGlmICghaGVscGVycy5pc1ZhbGlkQ2VsbFRvQXR0YWNrKGN1cnJDZWxsKSkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnN0IGl0SGl0ID0gYXR0YWNrKGVuZW15R2FtZWJvYXJkLCBjdXJyUm93LCBjb2wpO1xuXHRcdFx0XHRcdGlmIChpdEhpdCkge1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJBdHRhY2tEYXRhLmlzSG9yaXpvbnRhbCA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gaXRIaXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yIChsZXQgY3VyclJvdyA9IHJvdyAtIDE7IGN1cnJSb3cgPiByb3cgLSA0OyBjdXJyUm93LS0pIHtcblx0XHRcdFx0aWYgKGVuZW15R2FtZWJvYXJkLmNvbnRhaW5zSW52YWxpZENvb3JkaW5hdGVzKGN1cnJSb3csIGNvbCkpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBjdXJyQ2VsbCA9IGVuZW15R2FtZWJvYXJkLmdldEdhbWVib2FyZCgpW2N1cnJSb3ddW2NvbF07XG5cdFx0XHRcdGlmIChoZWxwZXJzLmlzUGFydEhpdChjdXJyQ2VsbCkpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fSBlbHNlIGlmICghaGVscGVycy5pc1ZhbGlkQ2VsbFRvQXR0YWNrKGN1cnJDZWxsKSkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnN0IGl0SGl0ID0gYXR0YWNrKGVuZW15R2FtZWJvYXJkLCBjdXJyUm93LCBjb2wpO1xuXHRcdFx0XHRcdGlmIChpdEhpdCkge1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJBdHRhY2tEYXRhLmlzSG9yaXpvbnRhbCA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gaXRIaXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Y29uc3QgcmFuZG9tUGxhY2VTaGlwcyA9IChvd25HYW1lYm9hcmQpID0+IHtcblx0XHRmb3IgKGxldCBzaGlwIG9mIGhlbHBlcnMuZ2V0U2hpcHMoKSkge1xuXHRcdFx0bGV0IGlzU2hpcFBsYWNlZCA9IGZhbHNlO1xuXHRcdFx0d2hpbGUgKCFpc1NoaXBQbGFjZWQpIHtcblx0XHRcdFx0bGV0IHJvdyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcblx0XHRcdFx0bGV0IGNvbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcblx0XHRcdFx0aXNTaGlwUGxhY2VkID0gb3duR2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwLCByb3csIGNvbCk7XG5cdFx0XHRcdGlmICghaXNTaGlwUGxhY2VkKSB7XG5cdFx0XHRcdFx0c2hpcC5pc0hvcml6b250YWwgPSAhc2hpcC5pc0hvcml6b250YWw7XG5cdFx0XHRcdFx0aXNTaGlwUGxhY2VkID0gb3duR2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwLCByb3csIGNvbCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Y29uc3QgcmFuZG9tQXR0YWNrID0gKGVuZW15R2FtZWJvYXJkKSA9PiB7XG5cdFx0bGV0IGlzQXR0YWNrVmFsaWQgPSBmYWxzZTtcblx0XHRsZXQgcm93O1xuXHRcdGxldCBjb2w7XG5cdFx0bGV0IGNlbGw7XG5cdFx0d2hpbGUgKCFpc0F0dGFja1ZhbGlkKSB7XG5cdFx0XHRyb3cgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG5cdFx0XHRjb2wgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG5cdFx0XHRjZWxsID0gZW5lbXlHYW1lYm9hcmQuZ2V0R2FtZWJvYXJkKClbcm93XVtjb2xdO1xuXHRcdFx0aXNBdHRhY2tWYWxpZCA9IGhlbHBlcnMuaXNWYWxpZENlbGxUb0F0dGFjayhjZWxsKTtcblx0XHR9XG5cdFx0Y29uc3QgaXNQYXJ0SGl0ID0gYXR0YWNrKGVuZW15R2FtZWJvYXJkLCByb3csIGNvbCk7XG5cdFx0aWYgKGlzUGFydEhpdCkge1xuXHRcdFx0Y29tcHV0ZXJBdHRhY2tEYXRhID0ge1xuXHRcdFx0XHRmaXJzdFBhcnRIaXRDb29yOiBbcm93LCBjb2xdLFxuXHRcdFx0XHRzaGlwOiBlbmVteUdhbWVib2FyZC5maW5kU2hpcChjZWxsLnNoaXBJZCksXG5cdFx0XHRcdGlzSG9yaXpvbnRhbDogdHJ1ZSxcblx0XHRcdH07XG5cdFx0fVxuXHRcdHJldHVybiBpc1BhcnRIaXQ7XG5cdH07XG5cblx0Y29uc3QgY29tcHV0ZXJBdHRhY2sgPSAoZW5lbXlHYW1lYm9hcmQpID0+IHtcblx0XHRsZXQgaXNQYXJ0SGl0O1xuXHRcdGNvbnN0IHsgc2hpcCB9ID0gY29tcHV0ZXJBdHRhY2tEYXRhO1xuXHRcdGlmIChzaGlwICYmICFzaGlwLmlzU3VuaygpKSB7XG5cdFx0XHRpc1BhcnRIaXQgPSBfY29tcHV0ZXJBdHRhY2tDcm9zc0RpcmVjdGlvbihlbmVteUdhbWVib2FyZCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlzUGFydEhpdCA9IHJhbmRvbUF0dGFjayhlbmVteUdhbWVib2FyZCk7XG5cdFx0fVxuXHRcdHJldHVybiBpc1BhcnRIaXQ7XG5cdH07XG5cblx0Y29uc3QgYXR0YWNrID0gKGVuZW15R2FtZWJvYXJkLCByb3csIGNvbCkgPT4ge1xuXHRcdGVuZW15R2FtZWJvYXJkLnJlY2VpdmVBdHRhY2socm93LCBjb2wpO1xuXHRcdGNvbnN0IGNlbGwgPSBlbmVteUdhbWVib2FyZC5nZXRHYW1lYm9hcmQoKVtyb3ddW2NvbF07XG5cdFx0cmV0dXJuIGhlbHBlcnMuaXNQYXJ0SGl0KGNlbGwpO1xuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0cmFuZG9tUGxhY2VTaGlwcyxcblx0XHRyYW5kb21BdHRhY2ssXG5cdFx0Y29tcHV0ZXJBdHRhY2ssXG5cdFx0YXR0YWNrLFxuXHR9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcGxheWVyO1xuIiwiaW1wb3J0IGRvbSBmcm9tICcuLi9kb20vZG9tJztcbmltcG9ydCBnYW1lYm9hcmQgZnJvbSAnLi4vLi4vZmFjdG9yaWVzL2dhbWVib2FyZC9nYW1lYm9hcmQnO1xuaW1wb3J0IHBsYXllciBmcm9tICcuLi8uLi9mYWN0b3JpZXMvcGxheWVyL3BsYXllcic7XG5pbXBvcnQgaGVscGVycyBmcm9tICcuLi9oZWxwZXJzL2hlbHBlcnMnO1xuXG5jb25zdCBnYW1lID0gKCgpID0+IHtcblx0Y29uc3QgZ2FtZWJvYXJkMSA9IGdhbWVib2FyZCgxMCk7XG5cdGNvbnN0IGdhbWVib2FyZDIgPSBnYW1lYm9hcmQoMTApO1xuXHRjb25zdCBwbGF5ZXIxID0gcGxheWVyKCk7XG5cdGNvbnN0IHBsYXllcjIgPSBwbGF5ZXIoKTtcblx0Y29uc3QgbWFpblBsYXllciA9ICdwbGF5ZXIxJztcblx0bGV0IGFjdGl2ZVBsYXllciA9IHBsYXllcjE7XG5cdGxldCBhY3RpdmVHYW1lYm9hcmQgPSBnYW1lYm9hcmQyO1xuXHRsZXQgd2lubmVyO1xuXHRjb25zdCBwbGF5ZXJzSW5mbyA9IHtcblx0XHRwbGF5ZXIxOiB7XG5cdFx0XHRnYW1lYm9hcmQ6IGdhbWVib2FyZDEsXG5cdFx0XHRyZW5kZXJUbzogZG9tLmdhbWVib2FyZDFDb250YWluZXIsXG5cdFx0XHRuYW1lOiAnZ2FtZWJvYXJkMScsXG5cdFx0XHRpc0Rpc2FibGVkKCkge1xuXHRcdFx0XHRyZXR1cm4gYWN0aXZlR2FtZWJvYXJkID09PSBnYW1lYm9hcmQyO1xuXHRcdFx0fSxcblx0XHRcdGlzTWFpblBsYXllcjogbWFpblBsYXllciA9PT0gJ3BsYXllcjEnID8gdHJ1ZSA6IGZhbHNlLFxuXHRcdH0sXG5cdFx0cGxheWVyMjoge1xuXHRcdFx0Z2FtZWJvYXJkOiBnYW1lYm9hcmQyLFxuXHRcdFx0cmVuZGVyVG86IGRvbS5nYW1lYm9hcmQyQ29udGFpbmVyLFxuXHRcdFx0bmFtZTogJ2dhbWVib2FyZDInLFxuXHRcdFx0aXNEaXNhYmxlZCgpIHtcblx0XHRcdFx0cmV0dXJuIGFjdGl2ZUdhbWVib2FyZCA9PT0gZ2FtZWJvYXJkMTtcblx0XHRcdH0sXG5cdFx0XHRpc01haW5QbGF5ZXI6IG1haW5QbGF5ZXIgPT09ICdwbGF5ZXIyJyA/IHRydWUgOiBmYWxzZSxcblx0XHR9LFxuXHR9O1xuXG5cdGNvbnN0IF9yYW5kb21QbGFjZVNoaXBzID0gKGdhbWVib2FyZDEsIGdhbWVib2FyZDIpID0+IHtcblx0XHRwbGF5ZXIxLnJhbmRvbVBsYWNlU2hpcHMoZ2FtZWJvYXJkMSk7XG5cdFx0cGxheWVyMi5yYW5kb21QbGFjZVNoaXBzKGdhbWVib2FyZDIpO1xuXHR9O1xuXG5cdGNvbnN0IF9nZXRXaW5uZXIgPSAoZ2FtZWJvYXJkMSwgZ2FtZWJvYXJkMikgPT4ge1xuXHRcdGlmIChnYW1lYm9hcmQxLmFyZUFsbFNoaXBzRGVzdHJveWVkKCkpIHtcblx0XHRcdHJldHVybiBwbGF5ZXIyO1xuXHRcdH0gZWxzZSBpZiAoZ2FtZWJvYXJkMi5hcmVBbGxTaGlwc0Rlc3Ryb3llZCgpKSB7XG5cdFx0XHRyZXR1cm4gcGxheWVyMTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9O1xuXG5cdGNvbnN0IF9zd2l0Y2hBY3RpdmVQbGF5ZXIgPSAoKSA9PiB7XG5cdFx0YWN0aXZlUGxheWVyID0gYWN0aXZlUGxheWVyID09PSBwbGF5ZXIxID8gcGxheWVyMiA6IHBsYXllcjE7XG5cdFx0YWN0aXZlR2FtZWJvYXJkID0gYWN0aXZlR2FtZWJvYXJkID09PSBnYW1lYm9hcmQxID8gZ2FtZWJvYXJkMiA6IGdhbWVib2FyZDE7XG5cdH07XG5cblx0Y29uc3QgX3VwZGF0ZUdhbWVib2FyZCA9ICgpID0+IHtcblx0XHRkb20ucmVuZGVyR2FtZWJvYXJkKFxuXHRcdFx0cGxheWVyc0luZm8ucGxheWVyMSxcblx0XHRcdG51bGwsXG5cdFx0XHRfaGFuZGxlU2hpcERyYWdTdGFydCxcblx0XHRcdF9oYW5kbGVDZWxsRHJvcCxcblx0XHRcdF9oYW5kbGVTaGlwQ2xpY2tcblx0XHQpO1xuXHRcdGRvbS5yZW5kZXJHYW1lYm9hcmQocGxheWVyc0luZm8ucGxheWVyMiwgX2hhbmRsZUNlbGxBdHRhY2spO1xuXHR9O1xuXG5cdGNvbnN0IF9uZXdSb3VuZCA9IChpc0ZpcnN0Um91bmQsIGlzTmV3UGxheWVyKSA9PiB7XG5cdFx0d2lubmVyID0gX2dldFdpbm5lcihnYW1lYm9hcmQxLCBnYW1lYm9hcmQyKTtcblx0XHRpZiAod2lubmVyKSB7XG5cdFx0XHRfdXBkYXRlR2FtZWJvYXJkKCk7XG5cdFx0XHRjb25zdCB3aW5uZXJUZXh0ID0gd2lubmVyID09PSBwbGF5ZXIxID8gJ3BsYXllcjEnIDogJ3BsYXllcjInO1xuXHRcdFx0YWxlcnQoYFdpbm5lciBpcyAke3dpbm5lclRleHR9YCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICghaXNGaXJzdFJvdW5kICYmIGlzTmV3UGxheWVyKSB7XG5cdFx0XHRfc3dpdGNoQWN0aXZlUGxheWVyKCk7XG5cdFx0fVxuXHRcdF91cGRhdGVHYW1lYm9hcmQoKTtcblx0XHRpZiAoYWN0aXZlUGxheWVyID09PSBwbGF5ZXIyKSB7XG5cdFx0XHRjb25zdCBpc1BhcnRIaXQgPSBwbGF5ZXIyLmNvbXB1dGVyQXR0YWNrKGdhbWVib2FyZDEpO1xuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdF9uZXdSb3VuZChmYWxzZSwgIWlzUGFydEhpdCk7XG5cdFx0XHR9LCA1MDApO1xuXHRcdH1cblx0fTtcblxuXHRjb25zdCBfaGFuZGxlU3RhcnRDbGljayA9ICgpID0+IHtcblx0XHRkb20uc3R5bGUoZmFsc2UsIGRvbS5nYW1lYm9hcmQyQ29udGFpbmVyLCBbJ2Rpc3BsYXktbm9uZSddKTtcblx0XHRfbmV3Um91bmQodHJ1ZSwgdHJ1ZSk7XG5cdFx0ZG9tLmRpc2FibGVPd25TaGlwc0NsaWNrKCk7XG5cdFx0ZG9tLnJlbW92ZU9wdGlvbnMoX2hhbmRsZVN0YXJ0Q2xpY2ssIF9oYW5kbGVSYW5kb21pc2VDbGljayk7XG5cdH07XG5cblx0Y29uc3QgX2hhbmRsZVJhbmRvbWlzZUNsaWNrID0gKCkgPT4ge1xuXHRcdGdhbWVib2FyZDEuZW1wdHlHYW1lYm9hcmQoKTtcblx0XHRwbGF5ZXIxLnJhbmRvbVBsYWNlU2hpcHMoZ2FtZWJvYXJkMSk7XG5cdFx0ZG9tLnJlbmRlckdhbWVib2FyZChcblx0XHRcdHBsYXllcnNJbmZvLnBsYXllcjEsXG5cdFx0XHRudWxsLFxuXHRcdFx0X2hhbmRsZVNoaXBEcmFnU3RhcnQsXG5cdFx0XHRfaGFuZGxlQ2VsbERyb3AsXG5cdFx0XHRfaGFuZGxlU2hpcENsaWNrXG5cdFx0KTtcblx0XHRkb20uZW5hYmxlR2FtZWJvYXJkKCdnYW1lYm9hcmQxJyk7XG5cdH07XG5cblx0Y29uc3QgX2hhbmRsZUNlbGxBdHRhY2sgPSAoZSkgPT4ge1xuXHRcdGlmICh3aW5uZXIpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG5cdFx0Y29uc3Qgcm93ID0gcGFyc2VJbnQodGFyZ2V0LmRhdGFzZXQucm93LCAxMCk7XG5cdFx0Y29uc3QgY29sID0gcGFyc2VJbnQodGFyZ2V0LmRhdGFzZXQuY29sLCAxMCk7XG5cdFx0Y29uc3QgY2VsbCA9IGFjdGl2ZUdhbWVib2FyZC5nZXRHYW1lYm9hcmQoKVtyb3ddW2NvbF07XG5cdFx0aWYgKGhlbHBlcnMuaXNWYWxpZENlbGxUb0F0dGFjayhjZWxsKSkge1xuXHRcdFx0Y29uc3QgaXRIaXQgPSBhY3RpdmVQbGF5ZXIuYXR0YWNrKGFjdGl2ZUdhbWVib2FyZCwgcm93LCBjb2wpO1xuXHRcdFx0X25ld1JvdW5kKGZhbHNlLCAhaXRIaXQpO1xuXHRcdH1cblx0fTtcblxuXHRjb25zdCBfaGFuZGxlU2hpcERyYWdTdGFydCA9IChlKSA9PiB7XG5cdFx0ZS5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsIGUudGFyZ2V0LmRhdGFzZXQuc2hpcElkKTtcblx0fTtcblxuXHRjb25zdCBfaGFuZGxlQ2VsbERyb3AgPSAoZSkgPT4ge1xuXHRcdC8vIFByZXZlbnQgZGVmYXVsdCBhY3Rpb24gKG9wZW4gYXMgbGluayB3aGVuIGkgZHJvcCBhIHNoaXAgaW4gYSBjZWxsKVxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcblx0XHRpZiAoIXRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2NlbGwnKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBzaGlwSWQgPSBlLmRhdGFUcmFuc2Zlci5nZXREYXRhKCd0ZXh0L3BsYWluJyk7XG5cdFx0Y29uc3Qgc2hpcE9iaiA9IGdhbWVib2FyZDEuZmluZFNoaXAoc2hpcElkKTtcblx0XHRjb25zdCBzaGlwRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtc2hpcC1pZD1cIiR7c2hpcElkfVwiXWApO1xuXHRcdGNvbnN0IHNoaXBEaXZDZWxsID0gc2hpcERpdi5wYXJlbnROb2RlO1xuXHRcdGNvbnN0IHJvdyA9IHBhcnNlSW50KHRhcmdldC5kYXRhc2V0LnJvdywgMTApO1xuXHRcdGNvbnN0IGNvbCA9IHBhcnNlSW50KHRhcmdldC5kYXRhc2V0LmNvbCwgMTApO1xuXHRcdGNvbnN0IHJvd09sZCA9IHBhcnNlSW50KHNoaXBEaXZDZWxsLmRhdGFzZXQucm93LCAxMCk7XG5cdFx0Y29uc3QgY29sT2xkID0gcGFyc2VJbnQoc2hpcERpdkNlbGwuZGF0YXNldC5jb2wsIDEwKTtcblxuXHRcdGdhbWVib2FyZDEucmVtb3ZlU2hpcChzaGlwT2JqKTtcblxuXHRcdC8vIEFwcGVuZCB0aGUgZHJhZ2dlZCBzaGlwIHRvIHNlbGVjdGVkIGNlbGxcblx0XHRpZiAoXG5cdFx0XHRnYW1lYm9hcmQxLmlzUGxhY2VtZW50VmFsaWQoXG5cdFx0XHRcdHNoaXBPYmoubGVuZ3RoLFxuXHRcdFx0XHRzaGlwT2JqLmlzSG9yaXpvbnRhbCxcblx0XHRcdFx0cm93LFxuXHRcdFx0XHRjb2xcblx0XHRcdClcblx0XHQpIHtcblx0XHRcdGdhbWVib2FyZDEucGxhY2VTaGlwKHNoaXBPYmosIHJvdywgY29sKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Z2FtZWJvYXJkMS5wbGFjZVNoaXAoc2hpcE9iaiwgcm93T2xkLCBjb2xPbGQpO1xuXHRcdH1cblx0XHRkb20ucmVuZGVyR2FtZWJvYXJkKFxuXHRcdFx0cGxheWVyc0luZm8ucGxheWVyMSxcblx0XHRcdG51bGwsXG5cdFx0XHRfaGFuZGxlU2hpcERyYWdTdGFydCxcblx0XHRcdF9oYW5kbGVDZWxsRHJvcCxcblx0XHRcdF9oYW5kbGVTaGlwQ2xpY2tcblx0XHQpO1xuXHRcdGRvbS5lbmFibGVHYW1lYm9hcmQoJ2dhbWVib2FyZDEnKTtcblx0fTtcblxuXHRjb25zdCBfaGFuZGxlU2hpcENsaWNrID0gKGUpID0+IHtcblx0XHRjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcblx0XHRjb25zdCBzaGlwSWQgPSB0YXJnZXQuZGF0YXNldC5zaGlwSWQ7XG5cdFx0Y29uc3Qgc2hpcE9iaiA9IGdhbWVib2FyZDEuZmluZFNoaXAoc2hpcElkKTtcblx0XHRjb25zdCBzaGlwRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtc2hpcC1pZD1cIiR7c2hpcElkfVwiXWApO1xuXHRcdGNvbnN0IHNoaXBEaXZDZWxsID0gc2hpcERpdi5wYXJlbnROb2RlO1xuXHRcdGNvbnN0IHJvdyA9IHBhcnNlSW50KHNoaXBEaXZDZWxsLmRhdGFzZXQucm93LCAxMCk7XG5cdFx0Y29uc3QgY29sID0gcGFyc2VJbnQoc2hpcERpdkNlbGwuZGF0YXNldC5jb2wsIDEwKTtcblxuXHRcdGdhbWVib2FyZDEucmVtb3ZlU2hpcChzaGlwT2JqKTtcblx0XHRzaGlwT2JqLmlzSG9yaXpvbnRhbCA9ICFzaGlwT2JqLmlzSG9yaXpvbnRhbDtcblx0XHRpZiAoIWdhbWVib2FyZDEucGxhY2VTaGlwKHNoaXBPYmosIHJvdywgY29sKSkge1xuXHRcdFx0c2hpcE9iai5pc0hvcml6b250YWwgPSAhc2hpcE9iai5pc0hvcml6b250YWw7XG5cdFx0XHRnYW1lYm9hcmQxLnBsYWNlU2hpcChzaGlwT2JqLCByb3csIGNvbCk7XG5cdFx0fVxuXHRcdGRvbS5yZW5kZXJHYW1lYm9hcmQoXG5cdFx0XHRwbGF5ZXJzSW5mby5wbGF5ZXIxLFxuXHRcdFx0bnVsbCxcblx0XHRcdF9oYW5kbGVTaGlwRHJhZ1N0YXJ0LFxuXHRcdFx0X2hhbmRsZUNlbGxEcm9wLFxuXHRcdFx0X2hhbmRsZVNoaXBDbGlja1xuXHRcdCk7XG5cdFx0ZG9tLmVuYWJsZUdhbWVib2FyZCgnZ2FtZWJvYXJkMScpO1xuXHR9O1xuXG5cdGNvbnN0IGluaXQgPSAoKSA9PiB7XG5cdFx0X3JhbmRvbVBsYWNlU2hpcHMoZ2FtZWJvYXJkMSwgZ2FtZWJvYXJkMik7XG5cdFx0ZG9tLmluaXQoXG5cdFx0XHRwbGF5ZXJzSW5mbyxcblx0XHRcdF9oYW5kbGVTdGFydENsaWNrLFxuXHRcdFx0X2hhbmRsZVJhbmRvbWlzZUNsaWNrLFxuXHRcdFx0X2hhbmRsZVNoaXBEcmFnU3RhcnQsXG5cdFx0XHRfaGFuZGxlQ2VsbERyb3AsXG5cdFx0XHRfaGFuZGxlU2hpcENsaWNrXG5cdFx0KTtcblx0fTtcblxuXHRyZXR1cm4geyBpbml0IH07XG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBnYW1lO1xuIiwiaW1wb3J0ICcuL3N0eWxlLmNzcyc7XG5pbXBvcnQgZ2FtZSBmcm9tICcuL21vZHVsZXMvZ2FtZS9nYW1lJztcblxuZ2FtZS5pbml0KCk7XG4iXSwic291cmNlUm9vdCI6IiJ9